#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AD="/data/media/0/MrturDroid"
ADSYS="/system/archidroid"
ADDEV="$ADSYS/dev"
ADSTATUS="/dev/ARCHIDROID_CRON_STATUS"
LOG="$AD/Cron.log"
ADCRON="/dev/archidroid/cron"
LISTENERS_DIR="$ADCRON/listeners"
MONITORS_DIR="$ADCRON/monitors"

INTERNAL_EVENTS_DIR="$ADCRON/events/internal"
EXTERNAL_EVENTS_DIR="$ADCRON/events/external"

PROCESS_WAIT_FOR_FINISH() {
	# Unfortunately I couldn't find a better method for this, sorry
	if [ ! -z "$1" ] && [ -e "/proc/$1" ]; then
		while [ "$(kill -0 "$1" >/dev/null 2>&1; echo $?)" -eq 0 ]; do
			sleep 1
		done
	fi
}

EXTERNAL_EVENT_TETHERING() {
	DNSMASQ_PID="$(pidof dnsmasq)"
	echo "EXTERNAL_EVENT_TETHERING: Detected dnsmasq (wi-fi tethering) under PID $DNSMASQ_PID. Turning off ArchiDroid's Adblock"
	ARCHIDROID_INIT "STOP" "ADBLOCK"
	EXTERNAL_EVENT_TETHERING_WAIT "$DNSMASQ_PID" &
}

EXTERNAL_EVENT_TETHERING_WAIT() {
	echo "EXTERNAL_EVENT_TETHERING_WAIT: Waiting for PID $1 to finish..."
	PROCESS_WAIT_FOR_FINISH "$1"
	echo "EXTERNAL_EVENT_TETHERING_WAIT: PID $1 finished. Starting ArchiDroid's Adblock (if enabled)..."
	ARCHIDROID_INIT "START" "ADBLOCK"
}

INTERNAL_EVENT_MONITOR() {
	echo "INTERNAL_EVENT_MONITOR: $1 $2"
	case "$1" in
		"STOP")
			case "$2" in
				"ALL")
					INTERNAL_EVENT_MONITOR "STOP" "archidroid_dnsmasq"
					INTERNAL_EVENT_MONITOR "STOP" "archidroid_dnsproxy2"
					INTERNAL_EVENT_MONITOR "STOP" "archidroid_pixelserv"
					INTERNAL_EVENT_MONITOR "STOP" "archidroid_haveged"
					INTERNAL_EVENT_MONITOR "STOP" "ARCHIDROID_MONITOR_DNS"
					;;
				*) rm -f "$MONITORS_DIR/$2" ;;
			esac
		;;
		"START")
			case "$2" in
				"ALL")
					INTERNAL_EVENT_MONITOR "START" "archidroid_dnsmasq"
					INTERNAL_EVENT_MONITOR "START" "archidroid_dnsproxy2"
					INTERNAL_EVENT_MONITOR "START" "archidroid_pixelserv"
					INTERNAL_EVENT_MONITOR "START" "archidroid_haveged"
					INTERNAL_EVENT_MONITOR "START" "ARCHIDROID_MONITOR_DNS"
					;;
				"ARCHIDROID_MONITOR_DNS")
					if [ ! -f "$MONITORS_DIR/$2" ]; then
						echo "INTERNAL_EVENT_MONITOR: ARCHIDROID_MONITOR_DNS"
						setsid ARCHIDROID_MONITOR_DNS & # ARCHIDROID_MONITOR_DNS contains "kill 0" command, therefore we must create a new session for him
					fi
					;;
				*)
					if [ -f "$ADDEV/MONITOR_$2_ENABLED" ] && [ ! -f "$MONITORS_DIR/$2" ]; then
						echo "INTERNAL_EVENT_MONITOR: ARCHIDROID_MONITOR_PROCESS $2"
						setsid ARCHIDROID_MONITOR_PROCESS "$2" & # ARCHIDROID_MONITOR_PROCESS contains "kill 0" command, therefore we must create a new session for him
					fi
			esac
		;;
	esac
}

EXTERNAL_EVENT() {
	case "$1" in
		"TETHERING") EXTERNAL_EVENT_TETHERING ;;
	esac
}

INTERNAL_EVENT() {
	case "$1" in
		"MONITOR_STOP") INTERNAL_EVENT_MONITOR "STOP" "ALL" ;;
		"MONITOR_START") INTERNAL_EVENT_MONITOR "START" "ALL" ;;
		"MONITOR_STOP_DNSMASQ") INTERNAL_EVENT_MONITOR "STOP" "archidroid_dnsmasq" ;;
		"MONITOR_START_DNSMASQ") INTERNAL_EVENT_MONITOR "START" "archidroid_dnsmasq" ;;
		"MONITOR_STOP_DNSPROXY2") INTERNAL_EVENT_MONITOR "STOP" "archidroid_dnsproxy2" ;;
		"MONITOR_START_DNSPROXY2") INTERNAL_EVENT_MONITOR "START" "archidroid_dnsproxy2" ;;
		"MONITOR_STOP_PIXELSERV") INTERNAL_EVENT_MONITOR "STOP" "archidroid_pixelserv" ;;
		"MONITOR_START_PIXELSERV") INTERNAL_EVENT_MONITOR "START" "archidroid_pixelserv" ;;
		"MONITOR_STOP_HAVEGED") INTERNAL_EVENT_MONITOR "STOP" "archidroid_haveged" ;;
		"MONITOR_START_HAVEGED") INTERNAL_EVENT_MONITOR "START" "archidroid_haveged" ;;
		"MONITOR_STOP_DNSDAEMON") INTERNAL_EVENT_MONITOR "STOP" "ARCHIDROID_MONITOR_DNS" ;;
		"MONITOR_START_DNSDAEMON") INTERNAL_EVENT_MONITOR "START" "ARCHIDROID_MONITOR_DNS" ;;
	esac
}

EXECUTE_EXTERNAL_EVENT() {
	for EVENT in "$EXTERNAL_EVENTS_DIR"/*; do
		EVENT="$(basename $EVENT)"
		echo "EXECUTE_EXTERNAL_EVENT: $EVENT"
		rm -f "$EXTERNAL_EVENTS_DIR/$EVENT" # Event is removed right after starting of the action
		EXTERNAL_EVENT "$EVENT"
		rm -f "$LISTENERS_DIR/$EVENT" # Listener is removed right after finishing of the action, if app decided to be informed about that
	done
}

EXECUTE_INTERNAL_EVENT() {
	for EVENT in "$INTERNAL_EVENTS_DIR"/*; do
		EVENT="$(basename $EVENT)"
		echo "EXECUTE_INTERNAL_EVENT: $EVENT"
		rm -f "$INTERNAL_EVENTS_DIR/$EVENT" # Event is removed right after starting of the action
		INTERNAL_EVENT "$EVENT"
		rm -f "$LISTENERS_DIR/$EVENT" # Listener is removed right after finishing of the action, if app decided to be informed about that
	done
}

LISTEN_EXTERNAL_EVENTS() {
	echo "LISTEN_EXTERNAL_EVENTS: $EXTERNAL_EVENTS_DIR"
	while :; do
		inotifywait -qqe create "$EXTERNAL_EVENTS_DIR"
		EXECUTE_EXTERNAL_EVENT &
	done
}

LISTEN_INTERNAL_EVENTS() {
	echo "LISTEN_INTERNAL_EVENTS: $INTERNAL_EVENTS_DIR"
	while :; do
		inotifywait -qqe create "$INTERNAL_EVENTS_DIR"
		EXECUTE_INTERNAL_EVENT &
	done
}

# Parse args to variables
BACKGROUND=0
for ARG in "$@"; do
	case "$ARG" in
		"background") BACKGROUND=1 ;;
	esac
done

if [ "$BACKGROUND" -eq 0 ]; then
	"$0" "background" "$@" &
	exit 0
fi

if [ -f "$ADSTATUS" ]; then
	rm -f "$ADSTATUS"
	sleep 1 # If there was a previous instance of the same monitor, give it a time to cleanup and finish
fi

echo "$$" > "$ADSTATUS"
> "$LOG" # This is the same as echo -n "" > "$LOG" but it's compatible with POSIX standard, while echo flags are not
mkdir -p "$LISTENERS_DIR" "$MONITORS_DIR" "$INTERNAL_EVENTS_DIR" "$EXTERNAL_EVENTS_DIR"
rm -f "$LISTENERS_DIR"/* "$MONITORS_DIR/"* "$INTERNAL_EVENTS_DIR"/* "$EXTERNAL_EVENTS_DIR"/*

exec 1>>"$LOG"
exec 2>&1
echo "CRON: Active! $$"

LISTEN_EXTERNAL_EVENTS &
LISTEN_INTERNAL_EVENTS &

INTERNAL_EVENT_MONITOR "START" "ALL" &

inotifywait -qq -e delete -e modify "$ADSTATUS"
echo "CRON: Caught EXIT signal!"
echo "CRON: Finishing..."; rm -f "$LISTENERS_DIR/*" "$MONITORS_DIR/*" "$EXTERNAL_LISTENERS_DIR/*" "$INTERNAL_LISTENERS_DIR/*"; kill 0
exit 0
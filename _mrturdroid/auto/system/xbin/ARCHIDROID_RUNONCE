#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 £ukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ADMOUNTED() {
	return "$(mount | grep -qi "$1"; echo $?)"
}

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/MrturDroid"
ADSYS="/system/archidroid"
ADTMPFS="$ADSYS/tmpfs"
LOG="$AD/RunOnce.log" # "/dev/null" is no verbose
ADSTATUS="$ADTMPFS/ARCHIDROID_RUNONCE_STATUS"

if [[ ! -d "$AD" ]]; then
	exit 0
fi

# Exit if barebones preset was used
if [[ -f /system/archidroid/dev/PRESET_BAREBONES ]]; then
	exit 0
fi

# Exit if user wiped data without reflashing

if [[ ! -f "/data/ARCHIDROID_DONT_REMOVE_ME" ]] ; then
	if ADMOUNTED "/data"; then
		echo "ERROR: MrturDroid is not compatible with wiping data, please reflash your system!"
		sync
		reboot recovery || poweroff
	else
		# User is probably only charging his device, that's fine
		exit 0
	fi

fi

if [[ ! -f "$ADSTATUS" ]]; then
	# First boot, good
	# debuggerd and init.d are executed in the nearly same moment, which may cause typical race condition here
	# It's very likely that these childs will enter this segment in the same moment, we must stop it right here
	# If we're not the lowest PID of all the PIDs from the same process, exit
	if [[ "$(pidof "$(basename "$0")" | awk '{print $1}')" != "$$" ]]; then
		exit 0
	fi
	ARCHIDROID_INIT "START" "TMPFS"
	echo "$$" > "$ADSTATUS"
else
	ADSIGNAL="$(cat $ADSTATUS)"
	if [[ "$ADSIGNAL" = "FINISHED" ]]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	elif [[ "$ADSIGNAL" = "RESTART" ]]; then
		# Backend restarts itself, good to know, allow that
		echo "$$" > "$ADSTATUS"
	elif [[ -d "/proc/$ADSIGNAL" ]]; then
		# Something tried to execute already running init, double-execution?
		exit 3
	else
		# Old PID is dead and didn't exit properly, allow that for now
		echo "$$" > "$ADSTATUS"
	fi
fi

# Parse args to variables
BACKGROUND=0
FORCEDSEMAPHORE=0
for ARG in "$@"; do
	case "$ARG" in
		"background") BACKGROUND=1 ;;
		"force") FORCEDSEMAPHORE=1 ;;
	esac
done

# Now we need to make sure that this is a background process to prevent slowing down bootup
if [[ "$BACKGROUND" -ne 1 ]]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "RESTART" > "$ADSTATUS"
	"$0" "background" "$@" &
	# Nothing to do here anymore, exit call
	exit 0
fi

# Redirect stdout and stderr to our log, just in case something bad happen
exec 1>"$LOG"
exec 2>&1

date
echo "MrturDroid $(getprop ro.mrturdroid.version)"
uname -a
echo "INFO: ArchiDroid_RunOnce executed!"

DBUPDATE() {
	# Thanks to idcrisis, modified by JustArchi
	local TRY=0
	local VAL1=""
	local VAL2=""
	local ID=""

	while [[ "$TRY" -le 5 ]] ; do
		((TRY++))
		if [[ "$4" = "APPEND" ]]; then
			# Append mode, value should exist already then
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			VAL1="$VAL1$5$3"

			# Let's update it now
			sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$VAL1' where name='$2';" 2>/dev/null

			# See if it worked
			VAL2="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"

			if [[ "$VAL1" = "$VAL2" ]]; then
				# Looks good
				if [[ "$TRY" -gt 1 ]]; then
					echo "INFO: DBUPDATE APPEND SUCCEEDED with $*. It was our $TRY try"
				fi
				return 0
			else
				# We failed
				echo "WARNING: DBUPDATE APPEND FAILED with $*. This is our $TRY try"
				sleep 1
			fi
		else
			# Insert/Update mode, check if value already exists
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			if [[ -z "$VAL1" ]]; then
				# We don't have any value, insert mode
				ID='null' # This actually means that we follow auto incremented key value and not putting our own
				sqlite3 /data/data/com.android.providers.settings/databases/settings.db "insert into $1 values($ID, '$2', '$3');" 2>/dev/null
			elif [[ "$VAL1" = "$3" ]]; then
				# Value exists and is the same as the one we want to insert, that's great!
				return 0
			else
				# Value exists but is not the one we want, update mode
				sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$3' where name='$2';" 2>/dev/null
			fi

			# See if it worked
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			if [[ "$VAL1" = "$3" ]]; then
				# Value exists and is the same as the one we want to insert, that's great!
				if [[ "$TRY" -gt 1 ]]; then
					echo "INFO: DBUPDATE APPEND SUCCEEDED with $*. It was our $TRY try"
				fi
				return 0
			else
				# Oops, something gone wrong
				echo "WARNING: DBUPDATE FAILED with $*. This is our $TRY try"
				sleep 1
			fi
		fi
	done
	echo "ERROR: Could not update $* after $TRY times. I'm giving up here, please investigate!"
	return 1
}

# Parse args to variables
BACKGROUND=0
FORCEDSEMAPHORE=0
for ARG in $@; do
	case "$ARG" in
		"background") BACKGROUND=1 ;;
		"force") FORCEDSEMAPHORE=1 ;;
	esac
done

echo "$(date)" >> $LOG
echo "MrturDroid $(getprop ro.mrturdroid.version)" >> $LOG
echo "$(uname -a)" >> $LOG
echo "INFO: ArchiDroid_RunOnce executed!" >> $LOG

# Now we need to make sure that this is background process to prevent slowing down bootup
if [ $BACKGROUND -ne 1 ]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "INFO: Spawning child!" >> $LOG
	echo "RESTART" > $ADSTATUS
	sh $0 "background" &

	# Nothing to do here anymore, exit call
	exit 1
else
	# We're running in background so let's proceed
	echo "INFO: I'm a child!" >> $LOG
fi

# mrtur presset?
MRTUR=1
if [ -e /system/etc/mrtur.txt ]; then
MRTUR=0
# Which mode are we using?
#
# 1 - Nexus4
#
ROM=1 # Default to Nexus4
fi

# Don't force install mode, unless FORCE file exists
if [[ -f "$AD/FORCE" ]]; then
	echo "WARNING: Forcing Install mode, even if Update mode found!"
	FORCE=1
else
	echo "INFO: Not forcing Install mode if Update mode found"
	FORCE=0
fi

# Let's find out what we want from our RunOnce
ADRELOAD=0
ADMANY=0

if [[ -f "$AD/INSTALL" || "$FORCE" -eq 1 ]]; then
	echo "INFO: Install mode detected, I'm either after full wipe or forced to think so. Turning on ADMANY and DBUPDATE"
	if [[ -d "$AD/FIRSTBOOT/DATA" ]]; then
		# Okay, this one is complicated due to lack of process substitution in our shell
		# We set as ADMANY the output of a command created in named pipe
		# This is because child shell can't modify parent's variables
		ADMANY="$(
			find "$AD/FIRSTBOOT/DATA" -mindepth 1 -maxdepth 1 -type d | (while read FOLDER; do
				((ADMANY++))
			done
			echo "$ADMANY")
		)"
	fi
	echo "INFO: I found $ADMANY folders for merging (data) in total"
	DBUPDATE=1
	ADRELOAD=1
elif [[ -f "$AD/UPDATE" ]]; then
	echo "INFO: Update mode detected. Turning off ADMANY and DBUPDATE"
	DBUPDATE=0
else
	# Panic
	echo "FATAL ERROR: Could not detect Install/Update mode, ABORTING RUNONCE, PLEASE INVESTIGATE"
	echo "FINISHED" > "$ADSTATUS"
	setsid ARCHIDROID_INIT "background" &
	exit 2
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: RunOnce Semaphore started"
LOOP=0

while ( ! pgrep com.android.systemu >/dev/null 2>&1 && [[ "$LOOP" -lt 600 ]]) || [[ "$FORCEDSEMAPHORE" -eq 1 ]] ; do
	if [[ "$DBUPDATE" -eq 1 ]]; then
		if [[ -f /data/data/com.android.providers.settings/databases/settings.db ]]; then
			echo "INFO: settings.db created! Performing DBUPDATE"

			# Let's update selected keyboard according to our choice
			# TODO: We should handle this internally, according to FIRSTBOOT instead of hardcoding keyboards
			ONESHOT=1
			for KEYBOARDFULL in "org.pocketworkstation.pckeyboard/.LatinIME"; do
				KEYBOARD="$(echo $KEYBOARDFULL | cut -d '/' -f 1)"
				if [[ -d "/data/data/$KEYBOARD" && "$ONESHOT" -eq 1 ]]; then
					echo "INFO: $KEYBOARD Keyboard found!"
					DBUPDATE secure default_input_method "$KEYBOARDFULL"
					DBUPDATE secure enabled_input_methods "$KEYBOARDFULL"
					ONESHOT=0
				elif [[ -d "/data/data/$KEYBOARD" ]]; then
					echo "INFO: Additional $KEYBOARD Keyboard found!"
					#DBUPDATE secure enabled_input_methods "$KEYBOARDFULL" APPEND ":"
				fi
			done
			
				echo "INFO: Applying standard preset DBUPDATE" >> $LOG

				DBUPDATE secure ui_theme_mode 2
				DBUPDATE global transition_animation_scale 0.0
				DBUPDATE global animator_duration_scale 0.0
				DBUPDATE global window_animation_scale 0.0
				DBUPDATE global wifi_scan_always_enabled 0
				DBUPDATE global install_non_market_apps 1
				DBUPDATE global package_verifier_enable 0			
				DBUPDATE system haptic_feedback_enabled 0
				DBUPDATE system status_bar_battery 1
				DBUPDATE system screen_off_timeout 30000			
				DBUPDATE system notification_alpha 0.0
				DBUPDATE system power_menu_config '**poweroff**|empty|**reboot**|empty|**screenshot**|empty|**sound**|empty'			
				DBUPDATE system navigation_bar_config '**recents**|**null**|empty|**home**|**null**|empty|**back**|**kill**|empty'
				DBUPDATE system navigation_bar_height 36
				DBUPDATE system navigation_bar_width 36
				DBUPDATE secure advanced_reboot 1				
				
			if [ $MRTUR -eq 1 ]; then
				echo "INFO: Applying supplementary preset DBUPDATE" >> $LOG

				#DBUPDATE global adb_enabled 1
				DBUPDATE secure lockscreen_lock_icon '/data/data/com.android.settings/files/slim_lock1397128684009.png'
			
			else
				echo "INFO: Applying mrtur preset DBUPDATE" >> $LOG
				
				DBUPDATE system statusbar_clock_date_display 1
				DBUPDATE system statusbar_clock_date_format 'EEE dd MMM'
				DBUPDATE system statusbar_clock_date_style 2
				DBUPDATE system statusbar_clock_style 1
				DBUPDATE global adb_enabled 1
				DBUPDATE global airplane_mode_on 0
				DBUPDATE global assisted_gps_enabled 1
				DBUPDATE global bluetooth_on 1
				DBUPDATE global call_auto_retry 0
				DBUPDATE global data_roaming 0
				DBUPDATE global dock_audio_media_enabled 1
				DBUPDATE global dock_sounds_enabled 0
				DBUPDATE global emergency_tone 0
				DBUPDATE global mobile_data 1
				DBUPDATE global mode_ringer 2
				DBUPDATE global power_notifications_enabled 0
				DBUPDATE global power_notifications_vibrate 0
				DBUPDATE global power_sounds_enabled 1
				DBUPDATE global stay_on_while_plugged_in 0
				DBUPDATE global usb_mass_storage_enabled 0
				DBUPDATE secure incall_power_button_behavior 2
				DBUPDATE secure long_press_timeout 500
				DBUPDATE system accelerometer_rotation 0
				DBUPDATE system auto_brightness_backlight 14,28,37,51,71,80,96,108,255,255,255,255
				DBUPDATE system auto_brightness_lux 10,50,100,200,400,500,800,1000,1600,3000,10000
				DBUPDATE system auto_brightness_responsiveness 1.0
				DBUPDATE system dim_screen 1
				DBUPDATE system lock_volume_keys 1
				DBUPDATE system lockscreen_sounds_enabled 0
				DBUPDATE system menu_location 2
				DBUPDATE system menu_visibility 0
				DBUPDATE system power_ui_low_battery_warning_policy 1
				DBUPDATE system recents_clear_all_on_right 1
				DBUPDATE system sound_effects_enabled 0
				DBUPDATE system system_power_enable_crt_off 0
				DBUPDATE system system_profiles_enabled 0
				DBUPDATE system user_rotation 0
				DBUPDATE system vibrate_when_ringing 1
				DBUPDATE system wakeup_when_plugged_unplugged 0
				#DBUPDATE system notification_sound 'content://media/internal/audio/media/32'
				#DBUPDATE system ringtone 'content://media/internal/audio/media/21'
			
			fi

			# And don't execute twice
			echo "INFO: Finished DBUPDATE"
			DBUPDATE=0
		fi
	fi

	# Now let's MAKE SURE that our settings are in fact applied, only if we don't have shared_prefs already (prevent non-clean override)
	if [ $ADMANY -gt 0 ]; then
		cd $AD/FIRSTBOOT/DATA
		for FOLDER in * ; do
			if [ -d /data/data/$FOLDER ]; then
				echo "INFO: I'm currently merging $FOLDER, called by ADMANY" >> $LOG
				ADOWNER=$(busybox ls -ld /data/data/$FOLDER | awk '{print $3}')
				cp -R $FOLDER/* /data/data/$FOLDER/
				busybox chown -hR $ADOWNER.$ADOWNER /data/data/$FOLDER
				#busybox chmod -R 777 /data/data/$FOLDER

				# Let's make it as safe as possible
				cd /data/data/$FOLDER
				for FILE in $(busybox find . -type d -mindepth 1); do
					busybox chmod 775 $FILE
				done
				for FILE in $(busybox find . -type f -mindepth 1); do
					EXTENSION=$(echo $FILE | awk -F '.' '{print $NF}')

					# Try to apply correct permissions for specific files
					# For example XposedBridge requires at least 644, so it doesn't work with generic 660
					case "$EXTENSION" in
						"jar") busybox chmod 664 $FILE ;;
						*) busybox chmod 666 $FILE
					esac
				done

				cd $AD/FIRSTBOOT/DATA
				# And we're done!
				rm -Rf $FOLDER
				rm -Rf /data/data/$FOLDER/_ADTEMP
				ADOWNER=""
				ADMANY=$(expr $ADMANY - 1)
				echo "INFO: Done! $ADMANY to go" >> $LOG
			fi
		done
	if [[ "$ADMANY" -gt 0 ]]; then
		# We need to use the same trick here as well
		ADMANY="$(
			find "$AD/FIRSTBOOT/DATA" -mindepth 1 -maxdepth 1 -type d | (while read FOLDER; do
				FOLDERSHORT="$(basename "$FOLDER")"
				if [[ -d "/data/data/$FOLDERSHORT" ]]; then
					#echo "INFO: I'm currently merging $FOLDERSHORT"
					ADOWNER="$(busybox ls -ld "/data/data/$FOLDERSHORT" | awk '{print $3}')"
					cp -R "$FOLDER"/* "/data/data/$FOLDERSHORT/"
					busybox chown -hR "$ADOWNER.$ADOWNER" "/data/data/$FOLDERSHORT"

					# Let's try to apply proper permissions, Android will correct them anyway later
					find "/data/data/$FOLDERSHORT" -type d -mindepth 1 | while read mFOLDER; do
						case "$(basename "$mFOLDER")" in # This will match filenames
							*) chmod 771 "$mFOLDER"
						esac
					done
					find "/data/data/$FOLDERSHORT" -type f -mindepth 1 | while read mFILE; do
						#case "$(echo "$mFILE" | awk -F '.' '{print $NF}')" in # This will match extensions, like jar
							#"jar") chmod 664 "$mFILE" ;;
							#*) chmod 660 "$mFILE"
						#esac
						case "$(basename "$mFILE")" in # This will match filenames
							"XposedBridge.jar") chmod 664 "$mFILE" ;;
							*) chmod 660 "$mFILE"
						esac
					done

					# And we're done!
					rm -rf "$FOLDER"
					((ADMANY--))
					#echo "INFO: Done! $ADMANY to go"
				fi
			done
			echo "$ADMANY")
		)"
	fi

	# Sleeping time
	FORCEDSEMAPHORE=0
	((LOOP++))
	sleep 1
done

if [[ "$LOOP" -ge 600 ]]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (RunOnce Semaphore)"
elif [[ "$LOOP" -eq 0 ]]; then
	echo "ERROR: I didn't even entered semaphore, forcing it this time, it may cause unexpected behaviour!"
	echo "RESTART" > "$ADSTATUS"
	"$0" "background" "forcedsemaphore" &
	exit 3
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (RunOnce Semaphore)"
fi

if [[ ! -z "$(getprop ro.build.selinux)" && -f /file_contexts ]]; then
	echo "INFO: Found SELinux build, relabeling /data"
	restorecon -R /data
fi
# I'm runonce script so let's clean everything and delete myself

rm -f "$AD/INSTALL" "$AD/UPDATE" "$AD/FORCE"
rm -rf "$AD/FIRSTBOOT"


# Execute a reboot if we need it
if [[ "$ADRELOAD" -eq 1 ]]; then
	echo "INFO: Reboot required, I'm rebooting the device right now"
	setsid ARCHIDROID_INIT "background" &
	sleep 1

	if [[ -f "$ADSYS/system/reboot.wav" && ! -z "$(which tinyplay)" ]]; then
		tinyplay "$ADSYS/system/reboot.wav" >/dev/null 2>&1 &
	fi

	setprop ctl.restart surfaceflinger
	setprop ctl.restart zygote
fi

# Finish
echo "FINISHED" > "$ADSTATUS"
echo "INFO: ArchiDroid RunOnce finished"
date
exit 0

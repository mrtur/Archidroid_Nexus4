#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 £ukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ADALIAS() {
	# Because fuck you kernel, that's why
	local CMD="$1"
	shift 1
	if [ -e /system/xbin/"$CMD" ]; then
		/system/xbin/"$CMD" "$@"
	elif [ -e /system/bin/"$CMD" ]; then
		/system/bin/"$CMD" "$@"
	else
		"$CMD" "$@"
	fi
}

# Define all unreliable commands, which kernel could override
# It's really sad that we're doing this
alias busybox='ADALIAS busybox'
alias kill='ADALIAS kill'
alias echo='ADALIAS echo'
alias reboot='ADALIAS reboot'
alias sqlite3='ADALIAS sqlite3'
alias tinyplay='ADALIAS tinyplay'
alias mount='ADALIAS mount'

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/MrturDroid"
ADSYS="/system/archidroid"
LOG="$AD/RunOnce.log" # "/dev/null" is no verbose
LOG2="$AD/RunOnce.log.0"
ADSTATUS="/dev/ARCHIDROID_RUNONCE_STATUS"

if [ ! -e "$AD" ]; then
	exit 0
fi
if [ ! -e /data/ARCHIDROID_DONT_REMOVE_ME ]; then
	echo "ERROR: ArchiDroid is not compatible with wiping data, please reflash your system!" >> "$LOG"
	poweroff
fi

if [ ! -e "$ADSTATUS" ]; then
	# First boot, good
	echo "$$" > "$ADSTATUS"

	# Manage fallback log
	if [ -e "$LOG" ]; then
		rm -f "$LOG2"
		mv "$LOG" "$LOG2"
	fi
else
	ADSIGNAL="$(cat $ADSTATUS)"
	if [ "$ADSIGNAL" = "FINISHED" ]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	elif [ "$ADSIGNAL" = "RESTART" ]; then
		# Backend restarts itself, good to know, allow that
		echo "$$" > "$ADSTATUS"
	else
		kill -s 0 "$ADSIGNAL" >/dev/null 2>&1
		ADSIGNAL="$?"
		if [ "$ADSIGNAL" -eq 0 ]; then
			# Something tried to execute already running init, double-execution?
			exit 3
		else
			# Old PID is dead and didn't exit properly, allow that for now
			echo "$$" > "$ADSTATUS"
		fi
	fi
fi

# Redirect stderr to our log, just in case something bad happen
#exec 1>$LOG # Use "exec 1>>$LOG" for append
> "$LOG" # This is the same as echo -n "" > "$LOG" but it's compatible with POSIX standard, while echo flags are not
exec 2>>"$LOG"

DBUPDATE() {
	# Thanks to idcrisis, modified by JustArchi
	local DONE=0
	local TRY=0
	local VAL1=""
	local VAL2=""
	local ID=""

	while [ "$DONE" -ne 1 ] ; do
		TRY=$(expr $TRY + 1)
		if [ "$4" == "APPEND" ]; then
			# Append mode, value should exist already then
			VAL1=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)
			VAL1="$VAL1$5$3"

			# Let's update it now
			sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$VAL1' where name='$2';" 2>/dev/null

			# See if it worked
			VAL2=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)

			if [ "$VAL1" == "$VAL2" ]; then
				# Looks good
				if [ $TRY -gt 1 ]; then
					echo "INFO: DBUPDATE APPEND SUCCEEDED with $@. It was our $TRY try" >> $LOG
				fi
				DONE=1
				return 0
			else
				# We failed, let's try maximum of 5 times before giving up
				echo "WARNING: DBUPDATE APPEND FAILED with $@. This is our $TRY try" >> $LOG
				sleep 1
				if [ $TRY -ge 5 ]; then
					echo "ERROR: Could not update $@ after $TRY times. I'm giving up here, please investigate!" >> $LOG
					DONE=1
					return 1
				fi
			fi
		else
			# Try to update value first if exists
			busybox sync
			sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$3' where name='$2';" 2>/dev/null
			busybox sync

			# See if it worked
			VAL1=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)

			# If not create it
			if [ "$VAL1" != "" ]; then
				# Looks good
				DONE=1
				return 0
			else
				ID='null'

				sqlite3 /data/data/com.android.providers.settings/databases/settings.db "insert into $1 values($ID, '$2', '$3');" 2>/dev/null
				busybox sync
			fi

			# Check if in fact we modified that
			VAL1=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)
			if [ "$VAL1" != "" ]; then
				# Looks good
				if [ $TRY -gt 1 ]; then
					echo "INFO: DBUPDATE SUCCEEDED with $@. It was our $TRY try" >> $LOG
				fi
				DONE=1
				return 0
			else
				# We failed, let's try maximum of 5 times before giving up
				echo "WARNING: DBUPDATE FAILED with $@. This is our $TRY try" >> $LOG
				sleep 1
				if [ $TRY -ge 5 ]; then
					echo "ERROR: Could not update $@ after $TRY times. I'm giving up here, please investigate!" >> $LOG
					DONE=1
					return 1
				fi
			fi
		fi
	done
}

# Parse args to variables
BACKGROUND=0
FORCEDSEMAPHORE=0
for ARG in $@; do
	case "$ARG" in
		"background") BACKGROUND=1 ;;
		"force") FORCEDSEMAPHORE=1 ;;
	esac
done

echo "$(date)" >> $LOG
echo "MrturDroid $(getprop ro.archidroid.version)" >> $LOG
echo "$(uname -a)" >> $LOG
echo "INFO: ArchiDroid_RunOnce executed!" >> $LOG

# Now we need to make sure that this is background process to prevent slowing down bootup
if [ $BACKGROUND -ne 1 ]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "INFO: Spawning child!" >> $LOG
	echo "RESTART" > $ADSTATUS
	sh $0 "background" &

	# Nothing to do here anymore, exit call
	exit 1
else
	# We're running in background so let's proceed
	echo "INFO: I'm a child!" >> $LOG
fi

# mrtur presset?
MRTUR=1
if [ -e /system/etc/mrtur.txt ]; then
MRTUR=0
# Which mode are we using?
#
# 1 - Nexus4
#
ROM=1 # Default to Nexus4
fi

# We don't need to reload anything for now
ADRELOAD=0

# Don't force install mode, unless FORCE file exists
if [ -e $AD/FORCE ]; then
	echo "WARNING: Forcing Install mode, even if Update mode found!" >> $LOG
	FORCE=1
else
	echo "INFO: Not forcing Install mode if Update mode found" >> $LOG
	FORCE=0
fi

# We want some sqlite3 updates and settings but only if INSTALL mode is enabled
if [ -e $AD/INSTALL ] || [ $FORCE -eq 1 ]; then
	echo "INFO: Install mode detected, I'm either after full wipe or forced to think so. Turning on ADMANY and DBUPDATE" >> $LOG
	INSTALLMODE=1
	if [ -d $AD/FIRSTBOOT/DATA ]; then
		ADMANY=0
		cd $AD/FIRSTBOOT/DATA
		for folder in $(busybox find . -mindepth 1 -maxdepth 1 -type d) ; do
			echo "I found $folder which need merging (data)" >> $LOG
			ADMANY=$(expr $ADMANY + 1)
		done
	else
		ADMANY=0
	fi
	echo "INFO: I found $ADMANY folders which need merging (data)" >> $LOG
	DBUPDATE=1
	ADRELOAD=1
elif [ -e $AD/UPDATE ]; then
	echo "INFO: Update mode detected. Turning off ADMANY and DBUPDATE" >> $LOG
	INSTALLMODE=0
	DBUPDATE=0
	ADMANY=0
else
	# Panic
	echo "FATAL ERROR: Could not detect Install/Update mode, ABORTING RUNONCE, PLEASE INVESTIGATE" >> $LOG
	sysrw || mount -o remount,rw /system
	rm -f $0
	sysro || mount -o remount,ro /system
	echo "FINISHED" > $ADSTATUS
	exit 2
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: RunOnce Semaphore started" >> $LOG
LOOP=0
while (! pgrep com.android && [ $LOOP -lt 300 ]) || [ $FORCEDSEMAPHORE -eq 1 ] ; do


	if [ $DBUPDATE -eq 1 ]; then
		if [ -e /data/data/com.android.providers.settings/databases/settings.db ]; then
			echo "INFO: Android created settings.db for me, how cute! Performing DBUPDATE" >> $LOG

			# Let's update selected keyboard according to our choice
			# TODO: We should handle this internally, according to FIRSTBOOT instead of hardcoding keyboards
			ONESHOT=1
			for KEYBOARDFULL in "org.pocketworkstation.pckeyboard/.LatinIME" "com.cootek.smartinputv5/com.cootek.smartinput5.TouchPalIME" ; do
				KEYBOARD=$(echo $KEYBOARDFULL | cut -d '/' -f 1)
				if [ -e /data/data/$KEYBOARD ] && [ $ONESHOT -eq 1 ]; then
					echo "INFO: $KEYBOARD Keyboard found!" >> $LOG
					DBUPDATE secure default_input_method "$KEYBOARDFULL"
					DBUPDATE secure enabled_input_methods "$KEYBOARDFULL"
					ONESHOT=0
				elif [ -e /data/data/$KEYBOARD ]; then
					echo "INFO: Additional $KEYBOARD Keyboard found!" >> $LOG
					#DBUPDATE secure enabled_input_methods "$KEYBOARDFULL" APPEND ":"
				fi
			done
			
				echo "INFO: Applying standard preset DBUPDATE" >> $LOG

				DBUPDATE secure ui_theme_mode 2
				DBUPDATE global transition_animation_scale 0.0
				DBUPDATE global animator_duration_scale 0.0
				DBUPDATE global window_animation_scale 0.0
				DBUPDATE global wifi_scan_always_enabled 0
				DBUPDATE global install_non_market_apps 1
				DBUPDATE global package_verifier_enable 0			
				DBUPDATE system haptic_feedback_enabled 0
				DBUPDATE system status_bar_battery 1
				DBUPDATE system screen_off_timeout 30000			
				DBUPDATE system notification_alpha 0.0
				DBUPDATE system power_menu_config '**poweroff**|empty|**reboot**|empty|**screenshot**|empty|**sound**|empty'			
				DBUPDATE system navigation_bar_config '**recents**|**null**|empty|**home**|**null**|empty|**back**|**null**|empty'
				DBUPDATE system navigation_bar_height 36
				DBUPDATE system navigation_bar_width 36
				DBUPDATE secure advanced_reboot 1				
				
			if [ $MRTUR -eq 1 ]; then
				echo "INFO: Applying supplementary preset DBUPDATE" >> $LOG

				#DBUPDATE global adb_enabled 1
				DBUPDATE secure lockscreen_lock_icon '/data/data/com.android.settings/files/lock_icon1388332024286.png'
			
			else
				echo "INFO: Applying mrtur preset DBUPDATE" >> $LOG
				
				DBUPDATE system statusbar_clock_date_display 1
				DBUPDATE system statusbar_clock_date_format 'EEE dd MMM'
				DBUPDATE system statusbar_clock_date_style 2
				DBUPDATE system statusbar_clock_style 1
				DBUPDATE global adb_enabled 1
				DBUPDATE global airplane_mode_on 0
				DBUPDATE global assisted_gps_enabled 1
				DBUPDATE global bluetooth_on 1
				DBUPDATE global call_auto_retry 0
				DBUPDATE global data_roaming 0
				DBUPDATE global dock_audio_media_enabled 1
				DBUPDATE global dock_sounds_enabled 0
				DBUPDATE global emergency_tone 0
				DBUPDATE global mobile_data 1
				DBUPDATE global mode_ringer 2
				DBUPDATE global power_notifications_enabled 0
				DBUPDATE global power_notifications_vibrate 0
				DBUPDATE global power_sounds_enabled 1
				DBUPDATE global stay_on_while_plugged_in 0
				DBUPDATE global usb_mass_storage_enabled 1
				DBUPDATE secure incall_power_button_behavior 2
				DBUPDATE secure long_press_timeout 500
				DBUPDATE system accelerometer_rotation 0
				DBUPDATE system auto_brightness_backlight 14,28,37,51,71,80,96,108,255,255,255,255
				DBUPDATE system auto_brightness_lux 10,50,100,200,400,500,800,1000,1600,3000,10000
				DBUPDATE system auto_brightness_responsiveness 1.0
				DBUPDATE system dim_screen 1
				DBUPDATE system lock_volume_keys 1
				DBUPDATE system lockscreen_sounds_enabled 0
				DBUPDATE system menu_location 2
				DBUPDATE system menu_visibility 0
				DBUPDATE system power_ui_low_battery_warning_policy 1
				DBUPDATE system recents_clear_all_on_right 1
				DBUPDATE system sound_effects_enabled 0
				DBUPDATE system system_power_enable_crt_off 0
				DBUPDATE system system_profiles_enabled 0
				DBUPDATE system user_rotation 0
				DBUPDATE system vibrate_when_ringing 1
				DBUPDATE system wakeup_when_plugged_unplugged 0
				#DBUPDATE system notification_sound 'content://media/internal/audio/media/32'
				#DBUPDATE system ringtone 'content://media/internal/audio/media/21'
			
			fi

			# And don't execute twice
			echo "INFO: Finished DBUPDATE" >> $LOG
			DBUPDATE=0
		fi
	fi

	# Now let's MAKE SURE that our settings are in fact applied, only if we don't have shared_prefs already (prevent non-clean override)
	if [ $ADMANY -gt 0 ]; then
		cd $AD/FIRSTBOOT/DATA
		for FOLDER in * ; do
			if [ -d /data/data/$FOLDER ]; then
				echo "INFO: I'm currently merging $FOLDER, called by ADMANY" >> $LOG
				ADOWNER=$(busybox ls -ld /data/data/$FOLDER | awk '{print $3}')
				cp -R $FOLDER/* /data/data/$FOLDER/
				busybox chown -hR $ADOWNER.$ADOWNER /data/data/$FOLDER
				#busybox chmod -R 777 /data/data/$FOLDER

				# Let's make it as safe as possible
				cd /data/data/$FOLDER
				for FILE in $(busybox find . -type d -mindepth 1); do
					busybox chmod 775 $FILE
				done
				for FILE in $(busybox find . -type f -mindepth 1); do
					EXTENSION=$(echo $FILE | awk -F '.' '{print $NF}')

					# Try to apply correct permissions for specific files
					# For example XposedBridge requires at least 644, so it doesn't work with generic 660
					case "$EXTENSION" in
						"jar") busybox chmod 664 $FILE ;;
						*) busybox chmod 666 $FILE
					esac
				done

				cd $AD/FIRSTBOOT/DATA
				# And we're done!
				rm -Rf $FOLDER
				rm -Rf /data/data/$FOLDER/_ADTEMP
				ADOWNER=""
				ADMANY=$(expr $ADMANY - 1)
				echo "INFO: Done! $ADMANY to go" >> $LOG
			fi
		done
	fi

	# Sleeping time
	FORCEDSEMAPHORE=0
	LOOP=$(expr $LOOP + 1)
	sleep 2
done

if [ $LOOP -ge 300 ]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (RunOnce Semaphore)" >> $LOG
elif [ $LOOP -eq 0 ]; then
	echo "ERROR: I didn't even entered semaphore, forcing it this time, it may cause unexpected behaviour!" >> $LOG
	echo "RESTART" > $ADSTATUS
	sh $0 "background" "forcedsemaphore" &
	exit 3
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (RunOnce Semaphore)" >> $LOG
fi

# Post-Installation functions
if [ $INSTALLMODE -eq 1 ]; then
	echo "INFO: Calling Post-Installation functions (if any)" >> $LOG
fi

# I'm runonce script so let's clean everything and delete myself
rm -f $AD/INSTALL
rm -f $AD/UPDATE
rm -f $AD/FORCE
rm -Rf $AD/FIRSTBOOT
rm -Rf $AD/Scripts
rm -f $AD/System/debian.tar.gz

sysrw || mount -o remount,rw /system
rm -f $0
busybox sync
#sysro || mount -o remount,ro /system

if [ -z $(which ARCHIDROID_RUNONCE) ]; then
	echo "INFO: Could not detect RunOnce in init.d after cleanup, that's good" >> $LOG
else
	echo "ERROR: I've detected RunOnce still in init.d after cleanup, that's not good, please investigate" >> $LOG
fi

# Execute a reboot if we need it
if [ $ADRELOAD -eq 1 ]; then
	echo "INFO: Reboot required, I'm rebooting the device right now" >> $LOG
	busybox sync
	setsid ARCHIDROID_INIT "background" &
	sleep 1

	setprop ctl.restart surfaceflinger
	setprop ctl.restart zygote
	sleep 10
fi
echo "INFO: ArchiDroid RunOnce finished" >> $LOG
"date" >> "$LOG"
echo "FINISHED" > $ADSTATUS
exit 0
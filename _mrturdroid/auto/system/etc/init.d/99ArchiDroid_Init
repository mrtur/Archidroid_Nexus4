#!/system/bin/sh

# ArchiDroid Init Script
# JustArchi@JustArchi.net
# Don't remove this file

# Not Disabled
#exit 0

ADALIAS() {
	# Because fuck you kernel, that's why
	local CMD="$1"
	shift 1
	if [ -e /system/xbin/$CMD ]; then
		/system/xbin/$CMD "$@"
	elif [ -e /system/bin/$CMD ]; then
		/system/bin/$CMD "$@"
	else
		$CMD "$@"
	fi
}

ADARGS() {
	# $1 - what we're looking for
	# $2 - where we're looking for
	if [ ! -z `echo "$2" | grep -i "$1"` ]; then
		return 0
	else
		return 1
	fi
}

ADTWEAK() {
	# $1 - what we're changing
	# $2 - to what we're changing
	local CURRENT=`cat "$1"`
	if [ "$CURRENT" == "$2" ]; then
		echo "ADTWEAK: Value of $1 is already set to $CURRENT" >> $LOG
	else
		echo "$2" > "$1"
		echo "ADTWEAK: Tweaked $1 value from $CURRENT to $2" >> $LOG
	fi
}

ADLOAD() {
	# $1 - what we're loading
	# $2 - optional
	if [ "$2" == "RELOAD" ]; then
		local LOG="/dev/null"
		local RELOAD=1
	else
		local RELOAD=0
	fi
	case "$1" in
		"ADBLOCK")
			if [ $ADBLOCK -eq 1 ]; then
				echo "INFO: Activating ArchiDroid's AdBlock!" >> $LOG
				if [ ! -e /system/mrturdroid/etc/hosts ]; then
					sysrw
					if [ -e $ADDEV/ADBLOCK_USE_ADAWAY_HOSTS ]; then
						ln -s /system/mrturdroid/etc/hosts_adaway /system/mrturdroid/etc/hosts
					elif [ -e $ADDEV/ADBLOCK_USE_MOAB_HOSTS ]; then
						ln -s /system/mrturdroid/etc/hosts_moab /system/mrturdroid/etc/hosts
					else
						echo "ERROR: No adblock hosts mode specified!" >> $LOG
						break
					fi
					sysro
				fi
				if [ $APPENDDNSES -eq 1 ]; then
					local DNS=""
					DNS1=`getprop net.dns1`
					DNS2=`getprop net.dns2`
					if [ $DNSDAEMON -eq 1 ]; then
						addnsdaemon "background" &
						APPENDDNSES=0
					elif [ -z "$DNS1" ] && [ $RELOAD -eq 0 ]; then
						echo "ADBLOCK: No local DNSes found, I'll try to hook them up later" >> $LOG
					else
						APPENDDNSES=0
					fi
				fi
				if [ "$ADBLOCKMODE" == "dnsmasq" ]; then
					echo "ADBLOCK: Activated archidroid_dnsmasq - local DNS server on 127.0.0.1:53, forwarding clean non-blocked traffic to OpenDNS/Google DNS" >> $LOG
					if [ ! -z "$DNS1" ]; then
						local DNS="-S $DNS1"
						if [ ! -z "$DNS2" ]; then
							local DNS+=" -S $DNS2"
						fi
						archidroid_dnsmasq --all-servers $DNS -C /system/mrturdroid/etc/dnsmasq.conf
						echo "ADBLOCK: Also added local DNS servers $DNS1 $DNS2" >> $LOG
					else
						archidroid_dnsmasq --all-servers -C /system/mrturdroid/etc/dnsmasq.conf
					fi
				elif [ "$ADBLOCKMODE" == "dnrd" ]; then
					echo "ADBLOCK: Activated archidroid_dnrd - local dns server on 127.0.0.1:53, forwarding clean non-blocked traffic to OpenDNS/Google DNS" >> $LOG
					if [ ! -z "$DNS1" ]; then
						local DNS="-s $DNS1"
						if [ ! -z "$DNS2" ]; then
							local DNS+=" -s $DNS2"
						fi
						archidroid_dnrd -a 127.0.0.1 -i -u 0 -r 0 -M 65535 -m hosts -R /system/mrturdroid/etc $DNS -s 208.67.222.222 -s 208.67.220.220 -s 8.8.8.8 -s 8.8.4.4
						echo "ADBLOCK: Also added local DNS servers $DNS1 $DNS2" >> $LOG
					else
						archidroid_dnrd -a 127.0.0.1 -i -u 0 -r 0 -M 65535 -m hosts -R /system/mrturdroid/etc -s 208.67.222.222 -s 208.67.220.220 -s 8.8.8.8 -s 8.8.4.4
					fi
				else
					echo "ERROR: No adblock mode specified!" >> $LOG
					break
				fi
				archidroid_dnsproxy2 -w 127.0.0.1 &
				echo "ADBLOCK: Activated archidroid_dnsproxy2 - local proxy server, forwarding all DNS traffic to 127.0.0.1:53" >> $LOG
				archidroid_pixelserv 127.0.0.1 >/dev/null 2>&1
				echo "ADBLOCK: Activated archidroid_pixelserv - local web server on 127.0.0.1:80, responding with NULLGIF" >> $LOG
				echo "INFO: ArchiDroid's AdBlock activated!" >> $LOG
			else
				echo "INFO: Adblock has been disabled" >> $LOG
			fi
			;;
		"FRANDOM")
			if [ $FRANDOM -eq 1 ]; then
				if [ ! -c /dev/frandom ]; then
					echo "INFO: frandom device not found, searching for frandom.ko kernel module..." >> $LOG
					for FRANDOMPATH in "/system/lib/modules" "/system/modules" "/lib/modules" "/modules"; do
						if [ -f $FRANDOMPATH/frandom.ko ]; then
							echo "INFO: Loading frandom using $FRANDOMPATH/frandom.ko!" >> $LOG
							insmod $FRANDOMPATH/frandom.ko
							sleep 1
							break
						fi
					done
				fi
				if [ -c /dev/frandom ]; then
					echo "INFO: frandom device found, activating erandom!" >> $LOG
					if [ ! -e /dev/urandom.ORIG ] && [ ! -e /dev/urandom.orig ] && [ ! -e /dev/urandom.ori ]; then
						# For compatibility with various CrossBreeder checks
						touch /dev/urandom.MOD
						touch /dev/random.MOD 

						mv /dev/urandom /dev/urandom.ORIG
						ln /dev/erandom /dev/urandom
						busybox chmod 644 /dev/urandom
						mv /dev/random /dev/random.ORIG
						ln /dev/erandom /dev/random
						busybox chmod 644 /dev/random
						echo "INFO: Activated!" >> $LOG
					else
						echo "INFO: It looks like frandom has been already loaded" >> $LOG
					fi
				else
					echo "INFO: frandom device not found after loading, it looks like it's not provided by your kernel or failed to load!" >> $LOG
				fi
			else
				echo "INFO: Frandom has been disabled" >> $LOG
			fi
			;;
		"HAVEGED")
			if [ $HAVEGED -eq 1 ]; then
				echo "INFO: Activating haveged!" >> $LOG
				ENTROPY=3072 # Default: 128, Linux: 896, Max: 4096 - We want to make it high enough, but with considering battery life as well
				ADTWEAK "/proc/sys/kernel/random/write_wakeup_threshold" "$ENTROPY"
				ADTWEAK "/proc/sys/vm/dirty_expire_centisecs" "1000"
				ADTWEAK "/proc/sys/vm/dirty_writeback_centisecs" "500"

				if [ -e /dev/random.ORIG ]; then
					mv /dev/random /dev/random.TEMP
					mv /dev/random.ORIG /dev/random
					archidroid_haveged -p /dev/ARCHIDROID_HAVEGED.PID >/dev/null 2>&1
					sleep 3 # Let's give haveged some time to initialize
					mv /dev/random /dev/random.ORIG
					mv /dev/random.TEMP /dev/random
				else
					archidroid_haveged -p /dev/ARCHIDROID_HAVEGED.PID >/dev/null 2>&1
					sleep 3 # Let's give haveged some time to initialize
				fi

				echo "INFO: Activated archidroid_haveged - HArdware Volatile Entropy Gathering and Expansion Daemon, regenerating kernel's entropy pool" >> $LOG
				echo "HAVEGED: Available entropy won't get below $ENTROPY" >> $LOG
				echo "HAVEGED: Current entropy: $(cat /proc/sys/kernel/random/entropy_avail)" >> $LOG
			else
				echo "INFO: Haveged has been disabled" >> $LOG
			fi
			;;
		*)
			echo "ERROR, NO VALID LOAD OPTION"
	esac
}

ADRELOAD() {
	# $1 - what we're reloading
	case "$1" in
		"ADBLOCK")
			killall archidroid_dnsmasq >/dev/null 2>&1
			killall archidroid_dnrd >/dev/null 2>&1
			killall archidroid_dnsproxy2 >/dev/null 2>&1
			killall archidroid_pixelserv >/dev/null 2>&1
			killall addnsdaemon >/dev/null 2>&1
			ADLOAD "ADBLOCK" "RELOAD"
			;;
		"FRANDOM")
			# Generic check if we're not doing something harmful
			if [ -e /dev/urandom.ORIG ] && [ -e /dev/random.ORIG ]; then
				rm -f /dev/urandom.MOD
				rm -f /dev/urandom
				mv /dev/urandom.ORIG /dev/urandom
				rm -f /dev/random.MOD
				rm -f /dev/random
				mv /dev/random.ORIG /dev/random
			else
				ADLOAD "FRANDOM" "RELOAD"
			fi
			;;
		"HAVEGED")
			killall archidroid_haveged >/dev/null 2>&1
			ADLOAD "HAVEGED" "RELOAD"
			;;
		*)
			echo "ERROR, NO VALID RELOAD OPTION"
	esac
}

# Define all unreliable commands, which kernel could override
# It's really sad that we're doing this
alias busybox='ADALIAS busybox'
alias kill='ADALIAS kill'
alias echo='ADALIAS echo'
alias reboot='ADALIAS reboot'
alias sqlite3='ADALIAS sqlite3'
alias tinyplay='ADALIAS tinyplay'
alias mount='ADALIAS mount'

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/MrturDroid"
ADDEV="/system/mrturdroid/dev"
LOG="$AD/Init.log" # "/dev/null" is no verbose
RUNONCELOG="$AD/RunOnce.log"
ADSTATUS="/dev/ARCHIDROID_INIT_STATUS"

# Initial ArchiDroid dev status
if [ -e $ADDEV/HAVEGED_ENABLED ]; then
	HAVEGED=1
else
	HAVEGED=0
fi
if [ -e $ADDEV/FRANDOM_ENABLED ]; then
	FRANDOM=1
else
	FRANDOM=0
fi
if [ -e $ADDEV/ADBLOCK_ENABLED ]; then
	ADBLOCK=1
	if [ -e $ADDEV/ADBLOCK_USE_DNSMASQ ]; then
		ADBLOCKMODE="dnsmasq"
	elif [ -e $ADDEV/ADBLOCK_USE_DNRD ]; then
		ADBLOCKMODE="dnrd"
	else
		ADBLOCKMODE="unknown"
	fi
	if [ -e $ADDEV/ADBLOCK_LOCAL_DNSES_ENABLED ]; then
		APPENDDNSES=1
		if [ -e $ADDEV/ADBLOCK_LOCAL_DNSES_DAEMON_ENABLED ]; then
			DNSDAEMON=1
		else
			DNSDAEMON=0
		fi
	else
		APPENDDNSES=0
	fi
else
	ADBLOCK=0
fi

if [ "$1" == "RELOAD" ]; then
	# We're in reload mode, allow that regardless of adstatus
	ADRELOAD "$2"
	exit 0
elif [ ! -e $ADSTATUS ]; then
	# First boot, good
	echo $$ > $ADSTATUS
else
	ADSIGNAL=`cat $ADSTATUS`
	if [ $ADSIGNAL == "FINISHED" ]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	elif [ $ADSIGNAL == "RESTART" ]; then
		# Backend restarts itself, good to know, allow that
		echo $$ > $ADSTATUS
	else
		kill -s 0 $ADSIGNAL >/dev/null 2>&1
		ADSIGNAL=$?
		if [ $ADSIGNAL -eq 0 ]; then
			# Something tried to execute already running init, double-execution?
			exit 3
		else
			# Old PID is dead and didn't exit properly, allow that for now
			echo $$ > $ADSTATUS
		fi
	fi
fi

# Redirect stderr to our log, just in case something bad happen
#exec 1>$LOG # Use "exec 1>>$LOG" for append
echo -n "" > $LOG
exec 2>>$LOG

# Parse args to variables
if ADARGS "background" "$@" ; then
	BACKGROUND=1
else
	BACKGROUND=0
fi
if ADARGS "force" "$@" ; then
	FORCE=1
else
	FORCE=0
fi

echo "`date`" >> $LOG
echo "MrturDroid `getprop ro.mrturdroid.version`" >> $LOG
echo "`uname -a`" >> $LOG
echo "INFO: ArchiDroid_Init executed!" >> $LOG

if [ -e /system/etc/init.d/98ArchiDroid_RunOnce ] && [ $FORCE -ne 1 ]; then
	# This is our first boot, don't call init yet
	echo "INFO: This is our first boot, I'll let RunOnce finish his job, exiting..." >> $LOG
	echo "RESTART" > $ADSTATUS
	exit 2
fi

# Now we need to make sure that this is background process to prevent slowing down bootup
if [ $BACKGROUND -ne 1 ]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "INFO: Spawning child!" >> $LOG
	echo "RESTART" > $ADSTATUS
	sh $0 "background" &
	
	# Nothing to do here anymore, exit call
	exit 1
else
	# We're running in background so let's proceed
	echo "INFO: I'm a child!" >> $LOG
fi


# Which mode are we using?
#
# 1 - Nexus4
#
ROM=1 # Default to Nexus4
# Haveged support
ADLOAD "HAVEGED"

# Frandom support
ADLOAD "FRANDOM"

# Adblock support
ADLOAD "ADBLOCK"

# Sqlite VACUUM & REINDEX, disabled for a while
if [ $ROM -eq 9 ]; then #Always false
	echo "INFO: Performing VACUUM & REINDEX of databases" >> $LOG
	mount -o remount,rw /
	for i in `busybox find /data/data -iname "*.db"`; do
		sqlite3 $i 'VACUUM;'
		sqlite3 $i 'REINDEX;'
	done
	for i in `busybox find /data/system -iname "*.db"`; do
		sqlite3 $i 'VACUUM;'
		sqlite3 $i 'REINDEX;'
	done
	mount -o remount,ro /
fi

# Zipalign, disabled for a while
if [ $ROM -eq 9 ]; then #Always false
	echo "INFO: Performing ZIPALIGN of apks" >> $LOG
	for apk in /data/app/*.apk ; do
		zipalign -c 4 $apk;
		ZIPCHECK=$?;
		if [ $ZIPCHECK -eq 1 ]; then
			zipalign -f 4 $apk /cache/$(basename $apk)
			if [ -e /cache/$(basename $apk) ]; then
				cp -f /cache/$(basename $apk) $apk
				rm -f /cache/$(basename $apk)
				busybox chmod 644 $apk
			fi
		fi
	done
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: Init Semaphore started" >> $LOG
LOOP=0
while ! pgrep com.android && [ $LOOP -lt 300 ] ; do

	LOOP=`expr $LOOP + 1`
	sleep 2
done

if [ $LOOP -ge 300 ]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (Init Semaphore)" >> $LOG
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (Init Semaphore)" >> $LOG
fi

# Execute a reboot if we need it
if [ -e $AD/HARD_REBOOT_REQUIRED ]; then
	echo "INFO: HARD_REBOOT_REQUIRED found, I'm rebooting device now..." >> $LOG
	rm -f $AD/SOFT_REBOOT_REQUIRED
	rm -f $AD/HARD_REBOOT_REQUIRED
	reboot
elif [ -e $AD/SOFT_REBOOT_REQUIRED ]; then
	echo "INFO: SOFT_REBOOT_REQUIRED found, I'm rebooting android interface now..." >> $LOG
	rm -f $AD/SOFT_REBOOT_REQUIRED
	killall system_server
fi

# Wait a little longer
sleep 30

####################################
# We have fully loaded android now #
####################################

# Delete RunOnce if needed
if [ -e /system/etc/init.d/98ArchiDroid_RunOnce ]; then
	echo "WARNING: RunOnce found in init.d, trying to remove it!" >> $LOG
	echo "REMOTE: Hello, Init here. Don't worry about FATAL ERROR above, I'll try to fix it!" >> $RUNONCELOG
	echo "REMOTE: Dear user, you should look for RunOnce.log.0, it may contain more interesting RunOnce stuff!" >> $RUNONCELOG
	sysrw || mount -o remount,rw /system
	rm -f /system/etc/init.d/98ArchiDroid_RunOnce
	if [ ! -e /system/etc/init.d/98ArchiDroid_RunOnce ]; then
		echo "INFO: Success!" >> $LOG
		echo "REMOTE: Successfully fixed above FATAL ERROR!" >> $RUNONCELOG
		sysro || mount -o remount,ro /system
	else
		echo "ERROR: Failed!" >> $LOG
		echo "REMOTE: ERROR, could not fix above FATAL ERROR! Please investigate!" >> $RUNONCELOG
	fi
fi

# Mount external sd card if needed
if [ -e /dev/block/mmcblk1p1 ] && [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
	# Initial idea by AndiP71, aka Lord Boeffla
	# Further improvements by JustArchi

	echo "INFO: Detected sd card but it's not mounted yet, mounting..." >> $LOG
	KEEPGOING=1
	if [ `lsmod | grep "exfat" | wc -l` -eq 0 ]; then
		echo "WARNING: No exfat module found, it's either compiled in kernel or not loaded. Blindly loading..." >> $LOG
		busybox insmod /system/lib/modules/exfat_core.ko >/dev/null 2>&1
		busybox insmod /system/lib/modules/exfat_fs.ko >/dev/null 2>&1
		echo "INFO: Blind load completed, proceeding with mounting now..."
	fi

	if [ -e /storage/sdcard1 ]; then
		EXTSDPATH="/storage/sdcard1"
	elif [ -e /storage/extSdCard ]; then
		EXTSDPATH="/storage/extSdCard"
	else
		EXTSDPATH="UNKNOWN"
	fi

	if [ -e /dev/block/vold/179:49 ]; then
		EXTSDMOUNT="/dev/block/vold/179:49"
		echo "INFO: Mounting through vold 179:49!" >> $LOG
		busybox mount -t auto -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		if [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
			echo "WARNING: Failed!" >> $LOG
		else
			echo "INFO: Success!" >> $LOG
			KEEPGOING=0
		fi
	fi

	if [ $KEEPGOING -eq 1 ]; then
		EXTSDMOUNT="/dev/block/mmcblk1p1"
		echo "INFO: Mounting through mmcblk1p1!" >> $LOG
		busybox mount -t auto -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		if [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
			echo "WARNING: Failed!" >> $LOG
		else
			echo "INFO: Success!" >> $LOG
			KEEPGOING=0
		fi
	fi

	if [ $KEEPGOING -eq 1 ]; then
		echo "INFO: Trying panic mode!" >> $LOG
		EXTSDMOUNT="/dev/block/vold/179:49"
		mount -t exfat -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		mount -t ext4 -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		mount -t vfat -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		EXTSDMOUNT="/dev/block/mmcblk1p1"
		mount -t exfat -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		mount -t ext4 -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		mount -t vfat -o rw,dirsync,nosuid,nodev,noexec,noatime,nodiratime,uid=1000,gid=1023,fmask=0002,dmask=0002,allow_utime=0020 $EXTSDMOUNT $EXTSDPATH >/dev/null 2>&1
		if [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
			echo "WARNING: Failed!" >> $LOG
		else
			echo "INFO: Success!" >> $LOG
			KEEPGOING=0
		fi
	fi

	if [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
			echo "ERROR: I failed to mount external sd card with automatic filesystem. Giving up here!" >> $LOG
	else
		echo "INFO: Successfully mounted external sd card!" >> $LOG
	fi
else
	echo "INFO: OK, I don't need to mount external sd card" >> $LOG
fi

# Wait a little longer
sleep 30

#############################################
# User should already enter PIN, last stage #
#############################################

# Append DNSes to Adblock if needed
if [ $ADBLOCK -eq 1 ] && [ $APPENDDNSES -eq 1 ]; then
	if [ ! -z `getprop net.dns1` ]; then
		echo "ADBLOCK: Our late-hook worked. We now have `getprop net.dns1` `getprop net.dns2` DNSes. Reloading Adblock!" >> $LOG
		ADRELOAD "ADBLOCK"
	else
		echo "ADBLOCK: Local DNSes are still not available, it looks like we don't have network connection this time" >> $LOG
	fi
fi

# Init finished
echo "FINISHED" > $ADSTATUS
if [ ! -e /dev/ARCHIDROID_HAS_INIT ]; then
	echo "WARNING: It looks like kernel doesn't care about init.d, calling all init.d scripts via ArchiDroid Init!" >> $LOG
	for f in `find /system/etc/init.d -type f`; do
		echo "INFO: Calling $f" >> $LOG
		sh $f &
	done
else
	echo "INFO: It looks like kernel executed init.d properly, that's nice" >> $LOG
fi

# Finish
echo "INFO: ArchiDroid Init finished" >> $LOG
echo "`date`" >> $LOG
exit 0
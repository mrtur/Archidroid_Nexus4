#!/system/bin/sh

# ArchiDroid Init Script
# JustArchi@JustArchi.net

# Not Disabled
#exit 0

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/MrturDroid"
LOG="$AD/Init.log" # "/dev/null" is no verbose
ADSTATUS="/dev/ARCHIDROID_INIT_STATUS"

if [ ! -e $ADSTATUS ]; then
	# First boot, good
	echo -n $$ > $ADSTATUS
else
	ADSIGNAL=`cat $ADSTATUS`
	if [ $ADSIGNAL == "FINISHED" ]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	else
		kill -s 0 $ADSIGNAL >/dev/null 2>&1
		ADSIGNAL=$?
		if [ $ADSIGNAL -eq 0 ]; then
			# Something tried to execute already running init, double-execution?
			exit 3
		else
			# Old PID is dead and didn't exit properly, it looks like init re-executed itself f.e. for background purpose, allow that
			echo -n $$ > $ADSTATUS
		fi
	fi
fi

# Redirect stderr to our log, just in case something bad happen
#exec 1>$LOG # Use "exec 1>>$LOG" for append
echo -n "" > $LOG
exec 2>>$LOG

ADARGS() {
	# $1 - what we're looking for
	# $2 - where we're looking for
	if [ ! -z `echo "$2" | grep -i "$1"` ]; then
		return 0
	else
		return 1
	fi
}

# Parse args to variables
if ADARGS "background" "$@" ; then
	BACKGROUND=1
else
	BACKGROUND=0
fi
if ADARGS "force" "$@" ; then
	FORCE=1
else
	FORCE=0
fi

echo "`date`" >> $LOG
echo "`uname -a`" >> $LOG
echo "INFO: ArchiDroid_Init executed!" >> $LOG

if [ -e /system/etc/init.d/98ArchiDroid_RunOnce ] && [ $FORCE -ne 1 ]; then
	# This is our first boot, don't call init yet
	echo "INFO: This is our first boot, I'll let RunOnce finish his job, exiting..." >> $LOG
	exit 2
fi

# Now we need to make sure that this is background process to prevent slowing down bootup
if [ $BACKGROUND -ne 1 ]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "INFO: Spawning child!" >> $LOG
	sh $0 "background" &
	
	# Nothing to do here anymore, exit call
	exit 1
else
	# We're running in background so let's proceed
	echo "INFO: I'm a child!" >> $LOG
fi

# Cool ArchiDroid Banner
if [ -e /system/bin/boot-dmesg ]; then
	echo "INFO: boot-dmesg detected, turning on logcat banner" >> $LOG
	ADBANNER=1
else
	echo "INFO: boot-dmesg NOT detected, turning off logcat banner" >> $LOG
	ADBANNER=0
fi

# Sqlite VACUUM & REINDEX
echo "INFO: Performing VACUUM & REINDEX of databases" >> $LOG
busybox mount -o remount,rw /
for i in `busybox find /data/data -iname "*.db"`; do
	sqlite3 $i 'VACUUM;'
	sqlite3 $i 'REINDEX;'
done
for i in `busybox find /data/system -iname "*.db"`; do
	sqlite3 $i 'VACUUM;'
	sqlite3 $i 'REINDEX;'
done
busybox mount -o remount,ro /

# Zipalign, disabled for a while
if [ $ROM -eq 9 ]; then #Always false
	echo "INFO: Performing ZIPALIGN of apks" >> $LOG
	for apk in /data/app/*.apk ; do
		zipalign -c 4 $apk;
		ZIPCHECK=$?;
		if [ $ZIPCHECK -eq 1 ]; then
			zipalign -f 4 $apk /cache/$(basename $apk)
			if [ -e /cache/$(basename $apk) ]; then
				cp -f /cache/$(basename $apk) $apk
				rm -f /cache/$(basename $apk)
				busybox chmod 644 $apk
			fi
		fi
	done
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: Init Semaphore started" >> $LOG
LOOP=0
while ! pgrep com.android && [ $LOOP -lt 150 ] ; do
	if [ $ADBANNER -eq 1 ]; then
		echo "
*******************************************************************************
*             _                _      _  ____               _      _          *
*            / \    _ __  ___ | |__  (_)|  _ \  _ __  ___  (_)  __| |         *
*           / _ \  | '__|/ __|| '_ \ | || | | || '__|/ _ \ | | / _\` |         *
*          / ___ \ | |  | (__ | | | || || |_| || |  | (_) || || (_| |         *
*         /_/   \_\|_|   \___||_| |_||_||____/ |_|   \___/ |_| \__,_|         *
*                                                                             *
*******************************************************************************
*                  _                       _  _                               *
*                 | |     ___    __ _   __| |(_) _ __    __ _                 *
*                 | |    / _ \  / _\` | / _\` || || '_ \  / _\` |                *
*                 | |___| (_) || (_| || (_| || || | | || (_| |                *
*                 |_____|\___/  \__,_| \__,_||_||_| |_| \__, |                *
*                                                       |___/                 *
*******************************************************************************
*            root@ArchiDroid:~# Waiting for ArchiDroid to load...             *
*******************************************************************************
"
	fi
	LOOP=`expr $LOOP + 1`
	sleep 2
done

if [ $LOOP -ge 150 ]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (Init Semaphore)" >> $LOG
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (Init Semaphore)" >> $LOG
fi

if [ -e /dev/block/mmcblk1p1 ] && [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
	# Temporary workaround for mounting exFAT-formatted cards
	# Initial idea by AndiP71, aka Lord Boeffla
	# Further improvements by JustArchi

	echo "INFO: Detected sd card but it's not mounted yet" >> $LOG
	echo "INFO: Giving Android 20 more seconds to initialize external sd card..." >> $LOG
	sleep 20
	echo "INFO: Time passed!" >> $LOG
	if [ `mount | grep -i "sdcard1" | wc -l` -eq 0 ] && [ `mount | grep -i "extSdCard" | wc -l` -eq 0 ]; then
		echo "INFO: External sd card is still not mounted, mounting..." >> $LOG
		if [ `lsmod | grep "exfat" | wc -l` -eq 0 ]; then
			echo "WARNING: No exfat module found, it's either compiled in kernel or not loaded. Blindly loading..." >> $LOG
			busybox insmod /system/lib/modules/exfat_core.ko >/dev/null 2>&1
			busybox insmod /system/lib/modules/exfat_fs.ko >/dev/null 2>&1
			echo "INFO: Blind load completed, proceeding with mounting now..."
		fi

		if [ -e /storage/sdcard1 ]; then
			busybox mount -t auto /dev/block/mmcblk1p1 /storage/sdcard1
		elif [ -e /storage/extSdCard ]; then
			busybox mount -t auto /dev/block/mmcblk1p1 /storage/extSdCard
		fi

		if [ `mount | grep "sdcard1" | wc -l` -eq 0 ]; then
				echo "ERROR: I failed to mount external sd card with automatic filesystem. Giving up here!" >> $LOG
		else
			echo "INFO: Success!" >> $LOG
		fi
	else
		echo "INFO: OK, Android mounted our external sd card in given 20 seconds, aborting workaround" >> $LOG
	fi
else
	echo "INFO: OK, I don't need to mount external sd card" >> $LOG
fi

# Execute a reboot if we need it
if [ -e $AD/HARD_REBOOT_REQUIRED ]; then
	echo "INFO: HARD_REBOOT_REQUIRED found, I'm rebooting device now..." >> $LOG
	rm -f $AD/SOFT_REBOOT_REQUIRED
	rm -f $AD/HARD_REBOOT_REQUIRED
	reboot
elif [ -e $AD/SOFT_REBOOT_REQUIRED ]; then
	echo "INFO: SOFT_REBOOT_REQUIRED found, I'm rebooting android interface now..." >> $LOG
	rm -f $AD/SOFT_REBOOT_REQUIRED
	killall system_server
fi

# Finish
echo "INFO: ArchiDroid Init finished" >> $LOG
echo "`date`" >> $LOG
echo -n "FINISHED" > $ADSTATUS

# Finish
exit 0
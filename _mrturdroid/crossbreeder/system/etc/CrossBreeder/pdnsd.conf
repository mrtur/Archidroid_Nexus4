// Sample pdnsd configuration file. Must be customized to obtain a working pdnsd setup!
// Read the pdnsd.conf(5) manpage for an explanation of the options.
// Add or remove '#' in front of options you want to disable or enable, respectively.
// Remove '/*' and '*/' to enable complete sections.

global {
	perm_cache=8192;
	cache_dir="/data/local/pdnsd/cache";
	pid_file = /data/pdnsd.pid;
	server_ip = 127.0.0.3;   # Use eth0 here if you want to allow other
					   # machines on your network to query pdnsd.
	status_ctl = on;
	paranoid=off;      # This option reduces the chance of cache poisoning
	                   # but may make pdnsd less efficient, unfortunately.
	query_method=udp_tcp;
	min_ttl=3h;        # Retain cached entries at least 1 hour.
	max_ttl=1w;        # One week.
	udpbufsize=4096;   # Upper limit on the size of UDP messages.
	neg_ttl=0;
	neg_rrs_pol=off;
	neg_domain_pol=off;
	run_as=root;
	timeout=9;
	run_ipv4=off;
	par_queries=2;
#	daemon=on;
	randomize_recs=on;
	proc_limit=60;
	procq_limit=120;
	tcp_qtimeout=5;
}
/*
# The following section is most appropriate if you have a fixed connection to
# the Internet and an ISP which provides good DNS servers.
server {
	label= "dnscrypt-proxy";
	ip = 127.0.0.1;  # Put your ISP's DNS-server address(es) here.
	proxy_only=on;     # Do not query any name servers beside your ISP's.
	                   # This may be necessary if you are behind some
	                   # kind of firewall and cannot receive replies
	                   # from outside name servers.
	timeout=4;         # Server timeout; this may be much shorter
			   # that the global timeout option.
	uptest=query;      # Test if the network interface is active.
	interface=wlp3s0;  # The name of the interface to check.
	interval=10m;      # Check every 10 minutes.
	purge_cache=off;   # Keep stale cache entries in case the ISP's
			   # DNS servers go offline.
	edns_query=yes;    # Use EDNS for outgoing queries to allow UDP messages
			   # larger than 512 bytes. May cause trouble with some
			   # legacy systems.
}
*/

server {
        label = "Local";
        ip = 10.4.182.20,10.4.81.103;
#        ip = 192.168.1.254,192.231.203.3;
        proxy_only=on;     # Do not query any name servers beside your ISP's.
        randomize_servers=off;
        preset=on;
        timeout=4;         # Server timeout; this may be much shorter
        uptest=query;
        query_test_name = microsoft.com;    # To be used if remote servers ignore empty queries.
        edns_query=yes;
        caching=on;
        purge_cache=off;
        lean_query=on;
        root_server=off;
#       policy=excluded;
#       exclude=.akamai.net, .amazonaws.com, .youtube.com, .netflix.com ;
}

server {
        label = "Google";
        ip = 8.8.8.8;
#        ip = 2001:4860:4860::8888, 8.8.8.8, 216.146.35.35;
        proxy_only=on;     # Do not query any name servers beside your ISP's.
        randomize_servers=on;
        preset=on;
	timeout=4;         # Server timeout; this may be much shorter
        uptest=query;
        query_test_name = microsoft.com;    # To be used if remote servers ignore empty queries.
        edns_query=yes;
        caching=on;
        purge_cache=off;
        lean_query=on;
        root_server=off;
#        policy=excluded;
        exclude=.akamai.net, .amazonaws.com, .youtube.com, .netflix.com;
}

# The servers provided by OpenDNS are fast, but they do not reply with
# NXDOMAIN for non-existant domains, instead they supply you with an
# address of one of their search engines. They also lie about the addresses of 
# of the search engines of google, microsoft and yahoo.
# If you do not like this behaviour the "reject" option may be useful.
server {
	label = "OpenDNS_Dyn";
	ip = 208.67.220.220, 216.146.35.35;
	proxy_only=on;     # Do not query any name servers beside your ISP's.
	reject = 208.69.32.0/21, 
		208.67.216.0/21,
		204.194.237.0/24,
		204.194.238.0/24,
		204.194.239.0/24,
		67.215.64.0/19,
		77.67.54.0/27,
		77.67.54.160/27,
		77.67.54.128/27,
		77.67.54.32/27,
		77.67.54.64/27,
		77.67.54.96/27;
	reject_policy = fail;     # If you do not provide any alternative server
	                          # sections, like the following root-server
	                          # example, "negate" may be more appropriate here.
	randomize_servers=on;
	timeout=4;         # Server timeout; this may be much shorter
	preset=on;
	uptest=query;
	query_test_name = microsoft.com;    # To be used if remote servers ignore empty queries.
	edns_query=yes; 
	caching=on;
	purge_cache=off;
	lean_query=on;
	root_server=off;
	policy=included;
#	exclude=.google.com, .yahoo.com, .msn.com, .bing.com, .akamai.net, .amazonaws.com, .youtube.com, .netflix.com ;   	
#	exclude=.google.com, .yahoo.com, .msn.com, .bing.com;   	
        exclude=.google.com, .yahoo.com, .msn.com, .bing.com, .akamai.net, .amazonaws.com, .youtube.com, .netflix.com, .search-help.net, .srchdeliv.com ;
}

server {
        label = "Local2";
#        ip = 10.4.182.20,10.4.81.103;
#        ip = 192.168.1.254,192.231.203.3;
        proxy_only=on;     # Do not query any name servers beside your ISP's.
        randomize_servers=off;
        preset=on;
        timeout=4;         # Server timeout; this may be much shorter
        uptest=query;
        query_test_name = microsoft.com;    # To be used if remote servers ignore empty queries.
        edns_query=yes;
        caching=on;
        purge_cache=off;
        lean_query=on;
        root_server=off;
#       policy=excluded;
#       exclude=.akamai.net, .amazonaws.com, .youtube.com, .netflix.com ;
}

# This section is meant for resolving from root servers.
server {
	label = "root-servers";
	root_server = discover; # Query the name servers listed below
				# to obtain a full list of root servers.
	randomize_servers = on; # Give every root server an equal chance
	                        # of being queried.
	ip = 	2a01:440:1:f:178:19:70:8,      # This list will be expanded to the full
		2a01:7e0:0:100:212:224:71:116, # list on start up.
		2001:4b88:9000::,
		85.17.122.15,
		193.93.165.1,
		188.138.82.98,
		79.99.236.6,
		82.193.249.196,
		178.19.70.8,
		212.224.71.116,
		82.206.1.22;
	timeout = 6;
	uptest = query;         # Test availability using empty DNS queries.
	query_test_name = microsoft.com;    # To be used if remote servers ignore empty queries.
	interval = 30m;         # Test every half hour.
	ping_timeout = 300;     # Test should time out after 30 seconds.
	purge_cache = off;
	edns_query = yes;	# Use EDNS for outgoing queries to allow UDP messages
			   	# larger than 512 bytes. May cause trouble with some
			   	# legacy systems.
	exclude = .localdomain;
	policy = included;
	preset = on;
}

source {
	authrec = off;
	owner = localhost;
	serve_aliases = on;
	file = "/system/etc/CrossBreeder/dnrd_root/master";
}

/*
include {file="/etc/pdnsd.include";}	# Read additional definitions from /etc/pdnsd.include.
*/

rr {
	name=localhost;
	reverse=on;
	a=127.0.0.1;
	owner=localhost;
	soa=localhost,root.localhost,42,86400,900,86400,86400;
}


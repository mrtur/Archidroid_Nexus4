#
# Updater-script for ArchiDroid
#
ui_print(">>> ArchiDroid is now loading...");
sleep (1);
assert(getprop("ro.product.device") == "mako" || getprop("ro.build.product") == "mako");
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Ready!");
set_progress(0.01);
sleep (2);
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Unmounting Partitions");
assert(unmount("/system") || ui_print("(system is unmounted already)"));

set_progress(0.02);

if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" then
	mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
	package_extract_file("system/bin/backuptool.sh", "/tmp/backuptool.sh");
	package_extract_file("system/bin/backuptool.functions", "/tmp/backuptool.functions");
	set_perm(0, 0, 0777, "/tmp/backuptool.sh");
	set_perm(0, 0, 0644, "/tmp/backuptool.functions");
	run_program("/tmp/backuptool.sh", "backup");
	unmount("/system");
endif;

set_progress(0.03);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Formatting Partitions");
format("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "0", "/system");

set_progress(0.06);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Mounting Partitions");
assert(mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system") || ui_print("(system is mounted already)"));


set_progress(0.07);
#package_extract_file("_archidroid/scripts/bash", "/tmp/bash");
#set_perm(0, 0, 0777, "/tmp/bash");

if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "yes" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Formatting /data excluding /data/media");
	package_extract_file("_archidroid/scripts/wipe.sh", "/tmp/wipe.sh");
	set_perm(0, 0, 0777, "/tmp/wipe.sh");
	run_program("/tmp/wipe.sh");
endif;

set_progress(0.08);

if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Cleaning cache, dalvik cache and resource cache");
	delete_recursive("/data/dalvik-cache");
	delete_recursive("/dalvik/dalvik-cache");
	delete_recursive("/data/resource-cache");
endif;

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Executing Archi's Scripts");
package_extract_file("_archidroid/scripts/archidroid.sh", "/tmp/archidroid.sh");
set_perm(0, 0, 0777, "/tmp/archidroid.sh");
run_program("/tmp/archidroid.sh");

if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "yes" then
  ui_print("<b><#e0e0e0>RunOnce</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>$</#></b> Install Mode Detected");
  package_extract_file("_archidroid/scripts/archidroid_install.sh", "/tmp/archidroid_install.sh");
  set_perm(0, 0, 0777, "/tmp/archidroid_install.sh");
	run_program("/tmp/archidroid_install.sh");
else
	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","force") == "no" then
		ui_print("<b><#e0e0e0>RunOnce</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>$</#></b> Update Mode Detected");
		package_extract_file("_archidroid/scripts/archidroid_update.sh", "/tmp/archidroid_update.sh");
		set_perm(0, 0, 0777, "/tmp/archidroid_update.sh");
		run_program("/tmp/archidroid_update.sh");
	else
		ui_print("<b><#e0e0e0>RunOnce</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>$</#></b> Forced Update Mode Detected");
		package_extract_file("_archidroid/scripts/archidroid_update.sh", "/tmp/archidroid_update.sh");
		set_perm(0, 0, 0777, "/tmp/archidroid_update.sh");
		run_program("/tmp/archidroid_update.sh", "force");
	endif;
endif;

set_progress(0.09);

set_progress(0.1);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing ArchiDroid Core");
show_progress(0.4, 1212);
package_extract_dir("system", "/system");
if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing mrtur's Core");
	delete_recursive("/system/media/video");
	delete_recursive("/system/media/audio/alarms");
	#delete_recursive("/system/media/audio/ui");
	delete_recursive("/system/media/audio/ringtones");
	delete_recursive("/system/media/audio/notifications");
 	package_extract_dir("_mrtur/system", "/system");
endif;
run_program("/sbin/sync");

set_progress(0.51);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Creating symlinks");

symlink("../xbin/su", "/system/bin/su");
symlink("/data/misc/audio/mbhc.bin", "/system/etc/firmware/wcd9310/wcd9310_mbhc.bin");
symlink("/data/misc/audio/wcd9310_anc.bin", "/system/etc/firmware/wcd9310/wcd9310_anc.bin");
symlink("/data/misc/wifi/WCNSS_qcom_cfg.ini", "/system/vendor/firmware/wlan/prima/WCNSS_qcom_cfg.ini");
symlink("/data/misc/wifi/WCNSS_qcom_wlan_nv.bin", "/system/vendor/firmware/wlan/prima/WCNSS_qcom_wlan_nv.bin");
symlink("Roboto-Bold.ttf", "/system/fonts/DroidSans-Bold.ttf");
symlink("Roboto-Regular.ttf", "/system/fonts/DroidSans.ttf");
symlink("busybox", "/system/xbin/[", "/system/xbin/[[",
        "/system/xbin/adjtimex", "/system/xbin/arp", "/system/xbin/ash",
        "/system/xbin/awk", "/system/xbin/base64", "/system/xbin/basename",
        "/system/xbin/bbconfig", "/system/xbin/blkid", "/system/xbin/blockdev",
        "/system/xbin/brctl", "/system/xbin/bunzip2", "/system/xbin/bzcat",
        "/system/xbin/bzip2", "/system/xbin/cal", "/system/xbin/cat",
        "/system/xbin/catv", "/system/xbin/chattr", "/system/xbin/chgrp",
        "/system/xbin/chmod", "/system/xbin/chown", "/system/xbin/chroot",
        "/system/xbin/clear", "/system/xbin/cmp", "/system/xbin/comm",
        "/system/xbin/cp", "/system/xbin/cpio", "/system/xbin/crond",
        "/system/xbin/crontab", "/system/xbin/cut", "/system/xbin/date",
        "/system/xbin/dc", "/system/xbin/dd", "/system/xbin/depmod",
        "/system/xbin/devmem", "/system/xbin/df", "/system/xbin/diff",
        "/system/xbin/dirname", "/system/xbin/dmesg", "/system/xbin/dnsd",
        "/system/xbin/dos2unix", "/system/xbin/du", "/system/xbin/echo",
        "/system/xbin/ed", "/system/xbin/egrep", "/system/xbin/env",
        "/system/xbin/expand", "/system/xbin/expr", "/system/xbin/false",
        "/system/xbin/fbsplash", "/system/xbin/fdisk", "/system/xbin/fgrep",
        "/system/xbin/find", "/system/xbin/flash_lock",
        "/system/xbin/flash_unlock", "/system/xbin/flashcp",
        "/system/xbin/flock", "/system/xbin/fold", "/system/xbin/free",
        "/system/xbin/freeramdisk", "/system/xbin/fstrim", "/system/xbin/fsync",
        "/system/xbin/ftpget", "/system/xbin/ftpput", "/system/xbin/fuser",
        "/system/xbin/getopt", "/system/xbin/grep", "/system/xbin/groups",
        "/system/xbin/gunzip", "/system/xbin/gzip", "/system/xbin/halt",
        "/system/xbin/head", "/system/xbin/hexdump", "/system/xbin/id",
        "/system/xbin/ifconfig", "/system/xbin/inetd", "/system/xbin/insmod",
        "/system/xbin/install", "/system/xbin/ionice", "/system/xbin/iostat",
        "/system/xbin/ip", "/system/xbin/kill", "/system/xbin/killall",
        "/system/xbin/killall5", "/system/xbin/less", "/system/xbin/ln",
        "/system/xbin/losetup", "/system/xbin/ls", "/system/xbin/lsattr",
        "/system/xbin/lsmod", "/system/xbin/lsusb", "/system/xbin/lzcat",
        "/system/xbin/lzma", "/system/xbin/lzop", "/system/xbin/lzopcat",
        "/system/xbin/man", "/system/xbin/md5sum", "/system/xbin/mesg",
        "/system/xbin/mkdir", "/system/xbin/mke2fs", "/system/xbin/mkfifo",
        "/system/xbin/mkfs.ext2", "/system/xbin/mkfs.vfat",
        "/system/xbin/mknod", "/system/xbin/mkswap", "/system/xbin/mktemp",
        "/system/xbin/modinfo", "/system/xbin/modprobe", "/system/xbin/more",
        "/system/xbin/mount", "/system/xbin/mountpoint", "/system/xbin/mpstat",
        "/system/xbin/mv", "/system/xbin/nanddump", "/system/xbin/nandwrite",
        "/system/xbin/nbd-client", "/system/xbin/netstat", "/system/xbin/nice",
        "/system/xbin/nohup", "/system/xbin/nslookup", "/system/xbin/ntpd",
        "/system/xbin/od", "/system/xbin/patch", "/system/xbin/pgrep",
        "/system/xbin/pidof", "/system/xbin/ping", "/system/xbin/pipe_progress",
        "/system/xbin/pkill", "/system/xbin/pmap", "/system/xbin/poweroff",
        "/system/xbin/printenv", "/system/xbin/printf", "/system/xbin/ps",
        "/system/xbin/pstree", "/system/xbin/pwd", "/system/xbin/pwdx",
        "/system/xbin/rdev", "/system/xbin/readlink", "/system/xbin/realpath",
        "/system/xbin/renice", "/system/xbin/reset", "/system/xbin/resize",
        "/system/xbin/rev", "/system/xbin/rm", "/system/xbin/rmdir",
        "/system/xbin/rmmod", "/system/xbin/route", "/system/xbin/run-parts",
        "/system/xbin/rx", "/system/xbin/sed", "/system/xbin/seq",
        "/system/xbin/setconsole", "/system/xbin/setserial",
        "/system/xbin/setsid", "/system/xbin/sh", "/system/xbin/sha1sum",
        "/system/xbin/sha256sum", "/system/xbin/sha3sum",
        "/system/xbin/sha512sum", "/system/xbin/sleep", "/system/xbin/sort",
        "/system/xbin/split", "/system/xbin/stat", "/system/xbin/strings",
        "/system/xbin/stty", "/system/xbin/sum", "/system/xbin/swapoff",
        "/system/xbin/swapon", "/system/xbin/sync", "/system/xbin/sysctl",
        "/system/xbin/tac", "/system/xbin/tail", "/system/xbin/tar",
        "/system/xbin/taskset", "/system/xbin/tee", "/system/xbin/telnet",
        "/system/xbin/telnetd", "/system/xbin/test", "/system/xbin/tftp",
        "/system/xbin/tftpd", "/system/xbin/time", "/system/xbin/timeout",
        "/system/xbin/top", "/system/xbin/touch", "/system/xbin/tr",
        "/system/xbin/traceroute", "/system/xbin/true", "/system/xbin/ttysize",
        "/system/xbin/tune2fs", "/system/xbin/umount", "/system/xbin/uname",
        "/system/xbin/uncompress", "/system/xbin/unexpand", "/system/xbin/uniq",
        "/system/xbin/unix2dos", "/system/xbin/unlzma", "/system/xbin/unlzop",
        "/system/xbin/unxz", "/system/xbin/unzip", "/system/xbin/uptime",
        "/system/xbin/usleep", "/system/xbin/uudecode", "/system/xbin/uuencode",
        "/system/xbin/vi", "/system/xbin/watch", "/system/xbin/wc",
        "/system/xbin/wget", "/system/xbin/which", "/system/xbin/whoami",
        "/system/xbin/xargs", "/system/xbin/xz", "/system/xbin/xzcat",
        "/system/xbin/yes",
        "/system/xbin/zcat");
symlink("libGLESv2.so", "/system/lib/libGLESv3.so");
symlink("logcat", "/system/bin/lolcat");
symlink("mksh", "/system/bin/sh");
symlink("mount.exfat", "/system/bin/fsck.exfat",
        "/system/bin/mkfs.exfat");
symlink("pigz", "/system/xbin/unpigz");
symlink("toolbox", "/system/bin/cat", "/system/bin/chcon",
        "/system/bin/chmod", "/system/bin/chown", "/system/bin/clear",
        "/system/bin/cmp", "/system/bin/cp", "/system/bin/date",
        "/system/bin/dd", "/system/bin/df", "/system/bin/dmesg",
        "/system/bin/du", "/system/bin/getenforce", "/system/bin/getevent",
        "/system/bin/getprop", "/system/bin/getsebool", "/system/bin/grep",
        "/system/bin/hd", "/system/bin/id", "/system/bin/ifconfig",
        "/system/bin/iftop", "/system/bin/insmod", "/system/bin/ioctl",
        "/system/bin/ionice", "/system/bin/kill", "/system/bin/ln",
        "/system/bin/load_policy", "/system/bin/log", "/system/bin/ls",
        "/system/bin/lsmod", "/system/bin/lsof", "/system/bin/md5",
        "/system/bin/mkdir", "/system/bin/mount", "/system/bin/mv",
        "/system/bin/nandread", "/system/bin/netstat",
        "/system/bin/newfs_msdos", "/system/bin/notify", "/system/bin/printenv",
        "/system/bin/ps", "/system/bin/r", "/system/bin/reboot",
        "/system/bin/renice", "/system/bin/restart", "/system/bin/restorecon",
        "/system/bin/rm", "/system/bin/rmdir", "/system/bin/rmmod",
        "/system/bin/route", "/system/bin/runcon", "/system/bin/schedtop",
        "/system/bin/sendevent", "/system/bin/setconsole",
        "/system/bin/setenforce", "/system/bin/setfattr", "/system/bin/setprop",
        "/system/bin/setsebool", "/system/bin/sleep", "/system/bin/smd",
        "/system/bin/start", "/system/bin/stop", "/system/bin/sync",
        "/system/bin/top", "/system/bin/touch", "/system/bin/umount",
        "/system/bin/uptime", "/system/bin/vmstat", "/system/bin/watchprops",
        "/system/bin/wipe");
		
set_progress(0.52);
		
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing ArchiDroid Init Scripts");
### IMPORTANT ###
package_extract_dir("_archidroid/auto", "/");
if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing mrtur's Preset");
 	package_extract_dir("_mrtur/auto", "/");
endif;
### IMPORTANT ###

set_progress(0.53);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Setting Permissions");
set_perm_recursive(0, 0, 0755, 0644, "/system");
set_perm_recursive(0, 0, 0755, 0755, "/system/addon.d");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm(0, 3003, 02750, "/system/bin/netcfg");
set_perm(0, 0, 0755, "/system/bin/ping");
set_perm(0, 2000, 0750, "/system/bin/run-as");
set_perm(1014, 2000, 0550, "/system/etc/dhcpcd/dhcpcd-run-hooks");
set_perm_recursive(0, 2000, 0755, 0755, "/system/etc/init.d");
set_perm(0, 0, 0755, "/system/etc/init.d");
#set_perm(0, 2000, 0550, "/system/etc/init.goldfish.sh");
set_perm_recursive(0, 0, 0755, 0555, "/system/etc/ppp");
set_perm(0, 2000, 0755, "/system/vendor");
set_perm_recursive(0, 2000, 0755, 0644, "/system/vendor/etc");
set_perm(0, 0, 0644, "/system/vendor/etc/audio_effects.conf");
set_perm(0, 2000, 0755, "/system/vendor/firmware");
set_perm(0, 2000, 0755, "/system/vendor/firmware/discretix");
set_perm(0, 2000, 0755, "/system/vendor/firmware/keymaster");
set_perm_recursive(0, 2000, 0755, 0644, "/system/vendor/firmware/wlan");
set_perm(0, 0, 0644, "/system/vendor/firmware/wlan/prima/WCNSS_cfg.dat");
set_perm(0, 2000, 0755, "/system/vendor/lib");
#set_perm_recursive(0, 2000, 0755, 0644, "/system/vendor/lib/drm");
#set_perm(0, 0, 0644, "/system/vendor/lib/drm/libdrmwvmplugin.so");
#set_perm_recursive(0, 2000, 0755, 0644, "/system/vendor/lib/mediadrm");
#set_perm(0, 0, 0644, "/system/vendor/lib/mediadrm/libwvdrmengine.so");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm(0, 0, 06755, "/system/xbin/librank");
set_perm(0, 0, 06755, "/system/xbin/procmem");
set_perm(0, 0, 06755, "/system/xbin/procrank");
set_perm(0, 0, 06755, "/system/xbin/su");

set_progress(0.54);


##############
### KERNEL ###
##############

# We need to make sure that current kernel is based to prevent random zygote kernel panics
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Cleaning Old Kernel");
package_extract_file("boot.img", "/dev/block/platform/msm_sdcc.1/by-name/boot");

### TEMASEK ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "temasek" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing Temasek Kernel");
	#delete_recursive("/data/.temasek");
  delete("/data/.temasek/config.version");
  delete("/data/.temasek/customconfig.xml");
	delete_recursive("/system/lib/modules");
	package_extract_dir("_archidroid/kernels/temasek/system", "/system");
	set_perm_recursive(0, 0, 0755, 0755, "/system/lib/modules/");
	set_perm(0, 0, 0755, "/system/bin/hostapd");
	package_extract_dir("_archidroid/kernels/temasek/kernel", "/tmp");
	set_perm(0, 0, 0777, "/tmp/dump_image");
	set_perm(0, 0, 0777, "/tmp/mkbootimg.sh");
	set_perm(0, 0, 0777, "/tmp/mkbootimg");
	set_perm(0, 0, 0777, "/tmp/unpackbootimg");
	set_perm(0, 0, 0777, "/tmp/cpio");
	set_perm(0, 0, 0777, "/tmp/res/uci.sh");
	set_perm(0, 0, 0777, "/tmp/sbin/temasek.sh");
	run_program("/tmp/dump_image", "/dev/block/mmcblk0p5", "/tmp/boot.img");
	run_program("/tmp/unpackbootimg", "-i", "/tmp/boot.img", "-o", "/tmp/");
	run_program("/tmp/mkbootimg.sh");
	run_program("/sbin/busybox", "dd", "if=/tmp/newboot.img", "of=/dev/block/mmcblk0p5");
	
	if file_getprop("/tmp/aroma-data/archidroidtemasek.prop","preset") == "balanced" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid Balanced kernel config");
		package_extract_dir("_archidroid/presets/temasek/archi", "/data/.temasek");
	endif;
	if file_getprop("/tmp/aroma-data/archidroidtemasek.prop","preset") == "powersave" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid PowerSave kernel config");
		package_extract_dir("_archidroid/presets/temasek/archi_powersave", "/data/.temasek");
	endif;
	if file_getprop("/tmp/aroma-data/archidroidtemasek.prop","preset") == "ultra" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid ULTRA PowerSave kernel config");
		package_extract_dir("_archidroid/presets/temasek/archi_ultra_powersave", "/data/.temasek");
	endif;
	
	package_extract_dir("_archidroid/apps/stweaks", "/");
	
endif;

### YANK ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "yank" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing Yank555.lu Kernel");
	delete_recursive("/system/lib/modules");
	delete("/system/etc/init.kernel.sh");
	delete("/system/etc/init.hardswap.sh");
	delete("/data/kernel-script.log");
	delete("/data/hardswap.log");
	delete("/data/swap.0.log");
	delete("/data/swap.1.log");
	delete("/data/swap.2.log");
	delete("/data/swap.3.log");
	delete("/data/swap.4.log");

    package_extract_dir("_archidroid/kernels/yank/system", "/system");
	set_perm_recursive(0, 0, 0755, 0755, "/system/lib/modules/");
  set_perm(0, 0, 0755, "/system/etc/init.kernel.sh");
	package_extract_file("_archidroid/kernels/yank/boot.img", "/tmp/yank.img");
    write_raw_image("/tmp/yank.img", "/dev/block/mmcblk0p5");
    delete("/tmp/yank.img");
endif;

### BOEFFLA ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "boeffla" then
  ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing Boeffla Kernel");
  delete_recursive("/system/lib/modules");
  package_extract_dir("_archidroid/kernels/boeffla/system", "/system");
  package_extract_dir("_archidroid/kernels/boeffla/data", "/data");
  package_extract_dir("_archidroid/kernels/boeffla/presetseditable", "/data/.boeffla");
  package_extract_file("_archidroid/kernels/boeffla/boot.img", "/tmp/boeffla.img");
  write_raw_image("/tmp/boeffla.img", "/dev/block/mmcblk0p5");
  delete("/tmp/boeffla.img");
  
  if file_getprop("/tmp/aroma-data/archidroidboeffla.prop","preset") == "archiperformance" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid Performance kernel preset");
    package_extract_file("_archidroid/kernels/boeffla/presets/Archi_Performance", "/data/.boeffla/startconfig");
	endif;
  if file_getprop("/tmp/aroma-data/archidroidboeffla.prop","preset") == "archipowersave" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid PowerSave kernel preset");
    package_extract_file("_archidroid/kernels/boeffla/presets/Archi", "/data/.boeffla/startconfig");
	endif;
  if file_getprop("/tmp/aroma-data/archidroidboeffla.prop","preset") == "archiultrapowersave" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid UltraPowerSave kernel preset");
    package_extract_file("_archidroid/kernels/boeffla/presets/Archi_UltraPowerSave", "/data/.boeffla/startconfig");
	endif;
endif;

### GOOGY-MAX ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "googy" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing Googy-Max Kernel");
	package_extract_file("_archidroid/kernels/googymax/boot.img", "/tmp/googymax.img");
    write_raw_image("/tmp/googymax.img", "/dev/block/mmcblk0p5");
    delete("/tmp/googymax.img");
	package_extract_dir("_archidroid/apps/stweaks", "/");
endif;

### STOCK ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "stock" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing Stock Kernel");
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Trickster");
	package_extract_dir("_archidroid/apps/trickster", "/"); 
	
	# Not needed since zygote kernel panic fix
    #package_extract_file("boot.img", "/tmp/stock.img");
    #write_raw_image("/tmp/stock.img", "/dev/block/mmcblk0p5");
    #delete("/tmp/stock.img");
endif;

set_progress(0.6);


###############################
### ArchiDroid Audio Tweaks ###
###############################

### Presets for non-boeffla kernels, yet with boeffla sound engine ###
if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "temasek" || file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "yank" then
  if file_getprop("/tmp/aroma-data/archidroidboefflasound.prop","boeffla") == "yesarchi" then
    ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Boeffla SC with Archi's Audiophile preset");
    package_extract_dir("_archidroid/apps/boeffla", "/");
    package_extract_dir("_archidroid/presets/boeffla", "/");
  endif;	
  if file_getprop("/tmp/aroma-data/archidroidboefflasound.prop","boeffla") == "yes" then
      ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Boeffla SC");
      package_extract_dir("_archidroid/apps/boeffla/system/app", "/system/app");
  endif;
endif;


###############
### RESTORE ###
###############

if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Restoring Addons");
	package_extract_file("system/bin/backuptool.sh", "/tmp/backuptool.sh");
	package_extract_file("system/bin/backuptool.functions", "/tmp/backuptool.functions");
	set_perm(0, 0, 0777, "/tmp/backuptool.sh");
	set_perm(0, 0, 0644, "/tmp/backuptool.functions");
	run_program("/tmp/backuptool.sh", "restore");
	delete("/system/bin/backuptool.sh");
	delete("/system/bin/backuptool.functions");;
endif;

set_progress(0.63);


###########
### DPI ###
###########

### 240 ###
if file_getprop("/tmp/aroma-data/archidroid.prop","dpi") == "240" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying 240 DPI");
	package_extract_file("_archidroid/dpi/240dpi.sh", "/tmp/240dpi.sh");
	set_perm(0, 0, 0777, "/tmp/240dpi.sh");
	run_program("/tmp/240dpi.sh");
endif;

### 241 ###
if file_getprop("/tmp/aroma-data/archidroid.prop","dpi") == "241" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying 241 DPI");
	package_extract_file("_archidroid/dpi/241dpi.sh", "/tmp/241dpi.sh");
	set_perm(0, 0, 0777, "/tmp/241dpi.sh");
	run_program("/tmp/241dpi.sh");
endif;

### 268 ###
if file_getprop("/tmp/aroma-data/archidroid.prop","dpi") == "268" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying 268 DPI");
	package_extract_file("_archidroid/dpi/268dpi.sh", "/tmp/268dpi.sh");
	set_perm(0, 0, 0777, "/tmp/268dpi.sh");
	run_program("/tmp/268dpi.sh");
endif;
	
### 280 ###
if file_getprop("/tmp/aroma-data/archidroid.prop","dpi") == "280" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying 280 DPI");
	package_extract_file("_archidroid/dpi/280dpi.sh", "/tmp/280dpi.sh");
	set_perm(0, 0, 0777, "/tmp/280dpi.sh");
	run_program("/tmp/280dpi.sh");
endif;

### 320 ###
if file_getprop("/tmp/aroma-data/archidroid.prop","dpi") == "320" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying 320 DPI");
	package_extract_file("_archidroid/dpi/320dpi.sh", "/tmp/320dpi.sh");
	set_perm(0, 0, 0777, "/tmp/320dpi.sh");
	run_program("/tmp/320dpi.sh");
endif;

set_progress(0.64);




#############
### MODEM ###
#############

#package_extract_file("_archidroid/modem/flash_image", "/tmp/flash_image");
#set_perm(0, 0, 0777, "/tmp/flash_image");

if file_getprop("/tmp/aroma-data/archidroid.prop","updatemodem") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing XXEMG4 Modem");
	assert(package_extract_file("_archidroid/modem/xxemg4.bin", "/tmp/modem.bin"),
	run_program("/tmp/flash_image", "/dev/block/mmcblk0p7", "/tmp/modem.bin"),
	delete("/tmp/modem.bin"));
endif;

#delete("/tmp/flash_image");

#set_progress(0.70);


##############
### XPOSED ###
##############

if file_getprop("/tmp/aroma-data/archidroid.prop","xposed") == "1" then

	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Including Xposed Framework");
	package_extract_dir("_archidroid/apps/xposed/xposed", "/");
	
	if file_getprop("/tmp/aroma-data/archidroidxposed.prop","appsettings") == "1" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Including App Settings Xposed Module");
		package_extract_dir("_archidroid/apps/xposed/appsettings", "/");
	endif;
	if file_getprop("/tmp/aroma-data/archidroidxposed.prop","xprivacy") == "1" then
		ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Including XPrivacy Xposed Module");
		package_extract_dir("_archidroid/apps/xposed/xprivacy", "/");
	endif;
	
endif;

set_progress(0.71);


################
### RECOVERY ###
################

### PHILZ ###
if file_getprop("/tmp/aroma-data/archidroid.prop","updaterecovery") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Flashing PhilZ Recovery");
	assert(package_extract_file("recovery.img", "/tmp/recovery.img"),
	write_raw_image("/tmp/recovery.img", "/dev/block/mmcblk0p6"));
endif;

set_progress(0.72);


###########
### OTA ###
###########

if file_getprop("/tmp/aroma-data/archidroid.prop","archidroidota") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid OTA");
	package_extract_file("_archidroid/ota/ota.sh", "/tmp/ota.sh");
	set_perm(0, 0, 0777, "/tmp/ota.sh");
	run_program("/tmp/ota.sh");
	package_extract_dir("_archidroid/ota/app", "/");
endif;

set_progress(0.73);


################
### KEYBOARD ###
################

### TOUCHPAL ###
if file_getprop("/tmp/aroma-data/archidroid.prop","keyboard") == "touchpal" then
delete("/system/app/LatinIME.apk","/system/app/LatinImeDictionaryPack.apk");
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing TouchPal Keyboard");
package_extract_dir("_archidroid/apps/touchpal", "/");
endif;
if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing TouchPal for mrtur's preset");
	package_extract_dir("_mrtur/apps/touchpal", "/");
endif;

### HACKERS ###
if file_getprop("/tmp/aroma-data/archidroid.prop","keyboard") == "hackers" then
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Hacker's Keyboard");
delete("/system/app/LatinIME.apk","/system/app/LatinImeDictionaryPack.apk");
package_extract_dir("_archidroid/apps/hackers", "/");
endif;

### BOTH ###
if file_getprop("/tmp/aroma-data/archidroid.prop","keyboard") == "both" then
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing TouchPal + Hacker's Keyboard");
delete("/system/app/LatinIME.apk","/system/app/LatinImeDictionaryPack.apk");
package_extract_dir("_archidroid/apps/touchpal", "/");
package_extract_dir("_archidroid/apps/hackers", "/");
endif;

### STOCK ###
if file_getprop("/tmp/aroma-data/archidroid.prop","keyboard") == "stock" then
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Stock Keyboard");
# Not needed, haha!
endif;

### NONE ###
if file_getprop("/tmp/aroma-data/archidroid.prop","keyboard") == "none" then
	# Just delete LatinIME then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Skipping Keyboard");
	delete("/system/app/LatinIME.apk","/system/app/LatinImeDictionaryPack.apk");
endif;

set_progress(0.74);


################
### LAUNCHER ###
################

### NOVA ###
if file_getprop("/tmp/aroma-data/archidroid.prop","launcher") == "nova" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Nova Launcher");
	delete("/system/app/Trebuchet.apk");
	package_extract_dir("_archidroid/apps/nova", "/");
endif;

### STOCK ###
if file_getprop("/tmp/aroma-data/archidroid.prop","launcher") == "stock" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Stock Launcher");
	# Not needed, haha!
endif;

### NONE ###
if file_getprop("/tmp/aroma-data/archidroid.prop","launcher") == "none" then
	# Just delete Launcher then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Skipping Launcher");
	delete("/system/app/Trebuchet.apk");
endif;

set_progress(0.75);


#####################
### BOOTANIMATION ###
#####################

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "archi" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid Bootanimation");
	package_extract_dir("_archidroid/bootanimations/archi", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "archilegacy" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid Legacy Bootanimation");
	package_extract_dir("_archidroid/bootanimations/archilegacy", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "logcat" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying Logcat Bootanimation");
	package_extract_dir("_archidroid/bootanimations/logcat", "/");
	set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
	set_perm(0, 0, 06755, "/system/bin/boot-dmesg");
  delete("/system/media/bootanimation.zip");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "stock" then
  ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying Slim Bootanimation");
  # Not needed, haha!
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "nexus" then
  ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying Nexus Bootanimation");
  package_extract_dir("_archidroid/bootanimations/nexus", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "google" then
  ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying Google Bootanimation");
  package_extract_dir("_archidroid/bootanimations/google", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "none" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Disabling Bootanimation");
	package_extract_file("_archidroid/bootanimations/none/disablebootanim.sh", "/tmp/disablebootanim.sh");
	set_perm(0, 0, 0777, "/tmp/disablebootanim.sh");
	run_program("/tmp/disablebootanim.sh");
	delete ("/tmp/disablebootanim.sh");
	delete("/system/media/bootanimation.zip");
endif;

set_progress(0.76);
##############
### TWEAKS ###
##############

### ArchiDroid Tweaks ###
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying ArchiDroid Tweaks");

if file_getprop("/tmp/aroma-data/archidroid.prop","hdvoice") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying HD Voice Tweak");
	package_extract_dir("_archidroid/tweaks/hdvoice", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","buildtweaks") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying build.prop Tweaks");
	package_extract_file("_archidroid/tweaks/build.prop/tweaks.sh", "/tmp/tweaks.sh");
	set_perm(0, 0, 0777, "/tmp/tweaks.sh");
	run_program("/tmp/tweaks.sh");
  delete ("/tmp/tweaks.sh");
    if file_getprop("/tmp/aroma-data/archidroidbuild.prop","fastdormancy") == "0" then
      ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Disabling Fast Dormancy");
      package_extract_file("_archidroid/tweaks/build.prop/fdOFF.sh", "/tmp/fdOFF.sh");
      set_perm(0, 0, 0777, "/tmp/fdOFF.sh");
      run_program("/tmp/fdOFF.sh");
      delete ("/tmp/fdOFF.sh");
    endif;
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","openpdroid") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Applying OpenPDroid Patch");
  
  ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> ON HOLD");
	#package_extract_dir("_archidroid/tweaks/openpdroid", "/");
	#set_perm_recursive(0, 0, 0755, 0644, "/system/app");
	#set_perm_recursive(0, 0, 0755, 0644, "/system/framework");
	#set_perm_recursive(0, 0, 0755, 0644, "/system/media");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","nocell") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Removing Cell Broadcasts");
	delete("/system/app/CellBroadcastReceiver.apk");
endif;

set_progress(0.77);


#############
### GAPPS ###
#############

if file_getprop("/tmp/aroma-data/archidroid.prop","gapps") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Apps");
	delete("/system/app/Provision.apk","/system/app/QuickSearchBox.apk","/system/app/SetupWizard.apk","/system/app/Velvet.apk","/system/app/Vending.apk","/system/app/BrowserProviderProxy.apk","/system/app/PartnerBookmarksProvider.apk","/system/app/Gmail2.apk");
	package_extract_dir("_archidroid/gapps/system", "/system");
	set_perm(0, 0, 0755, "/system/addon.d/70-gapps.sh");
	#package_extract_dir("_archidroid/gapps/optional", "/tmp");
	#package_extract_file("_archidroid/gapps/install-optional.sh", "/tmp/install-optional.sh");
	#set_perm(0, 0, 0777, "/tmp/install-optional.sh");
	#run_program("/tmp/install-optional.sh", "");
	set_perm_recursive(0, 0, 0755, 0644, "/system/app");
endif;
if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing market for mrtur's preset");
	package_extract_dir("_mrtur/apps/market", "/");
endif;

set_progress(0.85);

if file_getprop("/tmp/aroma-data/archidroid.prop","gcalendar") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Calendar");
	package_extract_dir("_archidroid/apps/gcalendar", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gchrome") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Chrome");
	package_extract_dir("_archidroid/apps/gchrome", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gkeep") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Keep");
	package_extract_dir("_archidroid/apps/gkeep", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gmail") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Mail");
	package_extract_dir("_archidroid/apps/gmail", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gmaps") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Maps");
	package_extract_dir("_archidroid/apps/gmaps", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gvoice") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Voice");
	package_extract_dir("_archidroid/apps/gvoice", "/");
	delete("/system/app/VoiceSearchStub.apk");
	delete("/system/app/GoogleSearchWidget.apk");
	delete("/system/app/QuickSearchBox.apk");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","ghangouts") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Hangouts");
	package_extract_dir("_archidroid/apps/ghangouts", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gplus") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Plus");
	package_extract_dir("_archidroid/apps/gplus", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","gtranslate") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Google Translate");
	package_extract_dir("_archidroid/apps/gtranslate", "/");
endif;

set_progress(0.86);
	
	
############
### APPS ###
############

if file_getprop("/tmp/aroma-data/archidroid.prop","titaniumbackup") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Titanium Backup");
	package_extract_dir("_archidroid/apps/titaniumbackup", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","zram") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing ZRAM Status");
	package_extract_dir("_archidroid/apps/zramstatus", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","greenify") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Greenify");
	package_extract_dir("_archidroid/apps/greenify", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","lmt") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing LMT");
	package_extract_dir("_archidroid/apps/lmt", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","mxplayer") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing MXPlayer");
	package_extract_dir("_archidroid/apps/mxplayer", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","spiritfm") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Spirit FM");
	package_extract_dir("_archidroid/apps/spiritfm", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","bbs") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing BetterBatteryStats");
	package_extract_dir("_archidroid/apps/betterbatterystats", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","cooltool") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing CoolTool");
	package_extract_dir("_archidroid/apps/cooltool", "/");
endif;
if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing CoolTool for mrtur's preset");
	package_extract_dir("_mrtur/apps/cooltool", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","rootbrowser") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Root Browser");
	package_extract_dir("_archidroid/apps/rootbrowser", "/");
endif;
#if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "mrtur" then
#	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> mrtur </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing RootBrowser for mrtur's preset");
#	package_extract_dir("_mrtur/apps/rootbrowser", "/");
#endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","totalcommander") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Total Commander");
	package_extract_dir("_archidroid/apps/totalcommander", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","adobeflash") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Adobe Flash Player");
	package_extract_dir("_archidroid/apps/adobeflash", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","youtube") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing YouTube");
	package_extract_dir("_archidroid/apps/youtube", "/");
endif;

if file_getprop("/tmp/aroma-data/archidroid.prop","facebook") == "1" then
	ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing Facebook");
	package_extract_dir("_archidroid/apps/facebook", "/");
endif;

set_progress(0.90);


# One more fix to logcat
ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Syncing System");
#set_perm(1000, 1000, 0771, "/data");
#set_perm_recursive(1000, 1000, 0771, 0644, "/data/app");
#set_perm_recursive(0, 0, 0771, 0660, "/data/data");
run_program("/sbin/sync");

set_progress(0.92);


####################
### CROSSBREADER ###
####################

if file_getprop("/tmp/aroma-data/archidroid.prop","crossbreeder") == "1" then
        ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Installing CrossBreeder");
        
        # Freeze Fix
        unmount("/system");
        #unmount("/data");

        package_extract_dir("_archidroid/crossbreeder/setup", "/tmp"); 

        set_perm_recursive(0, 0, 0755, 0755, "/tmp");
        run_program("/sbin/busybox","chmod","-R","0755","/tmp");
        run_program("/sbin/busybox","chown","-R","0.0","/tmp");
        set_perm(0, 0, 0755, "/tmp/busybox");
        run_program("/tmp/busybox","chmod","-R","0755","/tmp");
        run_program("/tmp/busybox","chown","-R","0.0","/tmp");
        run_program("/tmp/busybox","mount","/system");
        run_program("/sbin/busybox","mount","/system");
        run_program("/tmp/busybox","mount","-o","rw,remount","/system");
        run_program("/sbin/busybox","mount","-o","rw,remount","/system");
        run_program("/tmp/busybox","mount","/data");
        run_program("/sbin/busybox","mount","/data");
        run_program("/tmp/busybox","mount","-o","rw,remount","/data");
        run_program("/sbin/busybox","mount","-o","rw,remount","/data");

        run_program("/tmp/busybox","rm","-fr","/system/etc/CrossBreeder");

        run_program("/tmp/busybox","mkdir","-p","/system/etc/CrossBreeder");
        run_program("/tmp/busybox","cp","-f","/tmp/tune2fs","/system/etc/CrossBreeder");
        #run_program("/tmp/busybox","cp","-f","/tmp/libiconv.so.2","/system/etc/CrossBreeder");
        run_program("/tmp/busybox","cp","-f","/tmp/busybox","/system/etc/CrossBreeder");
        set_perm_recursive(0, 0, 0755, 0755, "/system/etc/CrossBreeder");
        run_program("/tmp/busybox","chown","-R","0.0","/system/etc/CrossBreeder");
        run_program("/tmp/busybox","chmod","-R","0755","/system/etc/CrossBreeder");

        run_program("/tmp/busybox", "echo", "Restore", "started.");
        run_program("/tmp/restore_dnsmasq.sh");
        run_program("/tmp/busybox","echo","After","Restore");
        #run_program("/tmp/busybox","mv","-f","/system/etc/hosts","/system/etc/hosts.CBBAK");
        package_extract_dir("_archidroid/crossbreeder/system", "/system");
        run_program("/tmp/busybox","cp","-f","/tmp/recovery.log","/data/recovery_cb.log");
        #run_program("/tmp/busybox","cp","-f","/system/etc/CrossBreeder/dnsmasq","/system/bin/dnsmasq.bin");
        delete("/system/bin/dnsmasq.bin");
        run_program("/tmp/busybox", "ls", "-l", "/system/bin/dnsmasq");; 
        set_perm_recursive(0, 0, 0755, 0755, "/system/etc/CrossBreeder");

        run_program("/tmp/busybox","chown","-R","0.0","/system/etc/CrossBreeder");
        run_program("/tmp/busybox","chmod","-R","0755","/system/etc/CrossBreeder");

        #set_perm_recursive(0, 0, 0711, 0444, "/system/etc/CrossBreeder/root");

        #run_program("/tmp/busybox","chown","-R","0.0","/system/etc/CrossBreeder/root");
        #run_program("/tmp/busybox","chmod","-R","0444","/system/etc/CrossBreeder/root");
        #run_program("/tmp/busybox","chmod","0711","/system/etc/CrossBreeder/root");
        #run_program("/tmp/busybox","chmod","0711","/system/etc/CrossBreeder/root/errors");

        run_program("/tmp/busybox","chown","-R","0.0","/system/etc/CrossBreeder/dnrd_root");
        run_program("/tmp/busybox","chmod","-R","0644","/system/etc/CrossBreeder/dnrd_root");
        run_program("/tmp/busybox","chmod","0755","/system/etc/CrossBreeder/dnrd_root");

        #set_perm(0, 0, 0755, "/system/etc/init.d/zzCrossBreeder_initd");
        set_perm(0, 2000, 0755, "/system/xbin/haveged");
        delete("/system/xbin/CB_FileLock");
        set_perm(0, 0, 0755, "/system/etc/CrossBreeder/busybox");
        set_perm(0, 0, 0755, "/system/etc/CrossBreeder/dnrd.10053");
        set_perm(0, 0, 0755, "/system/etc/CrossBreeder/zzCrossBreeder");
        set_perm(0, 0, 0755, "/system/etc/CrossBreeder/zzCHECK_NET_DNS");
        set_perm(0, 0, 0755, "/system/bin/dnsmasq");
        set_perm(0, 0, 0755, "/system/bin/dnsmasq_dhcp");
        #set_perm(0, 0, 0644, "/system/etc/CrossBreeder/dnsmasq-host");
        #set_perm(0, 0, 0644, "/system/etc/resolv.conf");
        set_perm(0, 0, 0644, "/system/etc/hosts");
        set_perm(0, 0, 0644, "/system/etc/CrossBreeder/hosts");
        delete("/system/etc/init.d/00CrossBreeder");
        delete("/system/etc/init.d/zzCrossBreeder");
        delete("/system/etc/init.d/zzCrossBreeder_initd");
        #delete("/system/etc/CrossBreeder/dnsmasq");

        #set_perm(0, 0, 0755, "/system/etc/install-recovery.sh");
        run_program("/tmp/busybox","mv","-f","/system/etc/install-recovery.sh.CBBAK","/system/etc/install-recovery.sh");
        run_program("/tmp/install_init_entries.sh");
        #run_program("/tmp/install_hw_entries.sh");
        #run_program("/sbin/busybox","mv","-f","/system/etc/hw_config.sh.CBBAK","/system/etc/hw_config.sh");
        run_program("/tmp/busybox","mv","-f","/system/bin/debuggerd.CBBAK","/system/bin/debuggerd");
        set_perm(0, 2000, 0755, "/system/bin/debuggerd");
        run_program("/tmp/install_debuggerd.sh");

        run_program("/tmp/busybox","mv","/system/xbin/rngd","/system/xbin/rngd.bak");
        run_program("/tmp/busybox","rm","-fr","/data/rngd.pid");
        run_program("/tmp/busybox","mkdir","/data/rngd.pid/");
        run_program("/tmp/busybox","chown","0:0","/data/rngd.pid");
        run_program("/tmp/busybox","chmod","-R","500","/data/rngd.pid");
        set_perm_recursive(0, 0, 0500, 0500, " /data/rngd.pid/ ");
        run_program("/tmp/busybox","mv","/system/xbin/qrngd","/system/xbin/qrngd.bak");
        run_program("/tmp/busybox","mv","/system/bin/qrngd","/system/bin/qrngd.bak");
        run_program("/tmp/REMOVE_TETHER_BOOST");
        run_program("/tmp/busybox","mv","-f","/system/etc/dnsmasq.conf.CBBAK","/system/etc/dnsmasq.conf");
        run_program("/tmp/busybox","sync");
        #run_program("/tmp/busybox","umount","/system");
        run_program("/tmp/busybox","cp","-f","/tmp/recovery.log","/data/recovery_cb.log");
        run_program("/tmp/busybox","sync");

        run_program("/tmp/busybox","umount","/data");
        #run_program("/tmp/busybox","umount","/cache");
        run_program("/tmp/busybox","umount","/sd-ext");

	# Freeze fix
	sleep (1);
	assert(mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system") || ui_print("(system is mounted already)"));
	#assert(mount("ext4", "EMMC", "/dev/block/mmcblk0p12", "/data") || ui_print("(data is mounted already)"));
endif;

set_progress(0.98);


run_program("/sbin/sync");

set_progress(0.99);

ui_print("<b><#e0e0e0>root</#><#ffffff>@</#><#1082ac> ArchiDroid </#><#ffffff>:~</#><#b0b0b0>#</#></b> Unmounting partitions");
assert(unmount("/data") || ui_print("(data is unmounted already)"));
assert(unmount("/system") || ui_print("(system is unmounted already)"));

ui_print("===================================");
ui_print("  ArchiDroid Flashed Successfully  ");
ui_print("Please share your experience on XDA");
ui_print("===================================");
#run_program("/sbin/busybox", "cp", "/tmp/recovery.log", "/sdcard/recovery.log");
set_progress(1.0);
